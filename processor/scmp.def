// ***********************************************************************************************************
// ***********************************************************************************************************
//
//		Name:		scmp.def
//		Purpose:	Opcode definition
//		Created:	1st January 2016
//		Author:		Paul Robson (paul@robsons.org.uk)
//
// ***********************************************************************************************************
// ***********************************************************************************************************
//
//	%EOFFSET			calculate offset from operand, using E as alternative, into MA
//	%OFFSET 			calculate offset from operand into MA - E not used for $80
//	%P 			Pn 		n = 0 to 3, lower 2 bits of opcode
//	%APREDEC 			preincrement %P
//	%APOSTINC 			postincrement %P
//
// ***********************************************************************************************************
//								Memory Reference Instructions and Immediate
// ***********************************************************************************************************

C0-C3 		"LD #(%P)"		18
	%EOFFSET;MA = %P + offset
	READ()
	AC = MB

C4 			"LDI #"			10
	AC = operand

C5-C7 		"LD @#(%P)"		18
	%EOFFSET;%APREDEC;MA = %P
	READ()
	AC = MB
	%APOSTINC

// -----------------------------------------------------------------------------------------------------------

C8-CB 		"ST #(%P)"		18
	%EOFFSET;MA = %P + offset
	MB = AC;WRITE()

CD-CF 		"ST @#(%P)"		18
	%EOFFSET;%APREDEC;MA = %P
	MB = AC;WRITE()
	%APOSTINC

// -----------------------------------------------------------------------------------------------------------

D0-D3 		"AND #(%P)"		18
	%EOFFSET;MA = %P + offset
	READ()
	AC &= MB

D4 			"ANI #"			10
	AC &= operand

D5-D7 		"AND @#(%P)"	18
	%EOFFSET;%APREDEC;MA = %P
	READ()
	AC &= MB
	%APOSTINC

// -----------------------------------------------------------------------------------------------------------

D8-DB 		"OR #(%P)"		18
	%EOFFSET;MA = %P + offset
	READ()
	AC |= MB

DC 			"ORI #"			10
	AC |= operand

DD-DF 		"OR @#(%P)"	18
	%EOFFSET;%APREDEC;MA = %P
	READ()
	AC |= MB
	%APOSTINC

// -----------------------------------------------------------------------------------------------------------

E0-E3 		"XOR #(%P)"		18
	%EOFFSET;MA = %P + offset
	READ()
	AC ^= MB

E4 			"XRI #"			10
	AC ^= operand

E5-E7 		"XOR @#(%P)"	18
	%EOFFSET;%APREDEC;MA = %P
	READ()
	AC ^= MB
	%APOSTINC

// -----------------------------------------------------------------------------------------------------------

E8-EB 		"DAD #(%P)"		23
	%EOFFSET;MA = %P + offset
	READ()
	_DecimalAdd()

EC 			"DAI #"			15
	MB = operand
	_DecimalAdd()

ED-EF 		"DAD @#(%P)"	23
	%EOFFSET;%APREDEC;MA = %P
	READ()
	_DecimalAdd()
	%APOSTINC

// -----------------------------------------------------------------------------------------------------------

F0-F3 		"ADD #(%P)"		19
	%EOFFSET;MA = %P + offset
	READ()
	_BinaryAdd()

F4 			"ADI #"			11
	MB = operand
	_BinaryAdd()

F5-F7 		"ADD @#(%P)"	19
	%EOFFSET;%APREDEC;MA = %P
	READ()
	_BinaryAdd()
	%APOSTINC

// -----------------------------------------------------------------------------------------------------------

F8-FB 		"CAD #(%P)"		20
	%EOFFSET;MA = %P + offset
	READ()
	MB ^= 0xFF;_BinaryAdd()

FC 			"CAI #"			12
	MB = operand
	MB ^= 0xFF;_BinaryAdd()

FD-FF 		"CAD @#(%P)"	20
	%EOFFSET;%APREDEC;MA = %P
	READ()
	MB ^= 0xFF;_BinaryAdd()
	%APOSTINC

// ***********************************************************************************************************
//										Memory Increment/Decrement Instructions
// ***********************************************************************************************************

A8-AB 		"ILD #(%P)"		22
	%OFFSET;MA = %P + offset
	READ()
	MB = AC = (MB + 1)
	WRITE()

B8-BB 		"DLD #(%P)"		22
	%OFFSET;MA = %P + offset
	READ()
	MB = AC = (MB - 1)
	WRITE()

// ***********************************************************************************************************
//											Transfer Instructions
// ***********************************************************************************************************

90-93		"JMP #(%P)"		11
	%OFFSET
	P0 = %P + offset

94-97		"JP #(%P)"		10
	%OFFSET
	if ((AC & 0x80) == 0) P0 = %P + offset

98-9B		"JZ #(%P)"		10
	%OFFSET
	if (AC == 0) P0 = %P + offset

9C-9F		"JNZ #(%P)"		10
	%OFFSET
	if (AC != 0) P0 = %P + offset

// ***********************************************************************************************************
//												Delay Instructions
// ***********************************************************************************************************

8F 			"DLY #"			13
	_StartDelay(operand,AC)
	AC = 0

// ***********************************************************************************************************
//											Extension Register Instructions
// ***********************************************************************************************************

40 			"LDE"			6
	AC = EX

01			"XAE"			7
	temp8 = AC;AC = EX;EX = temp8

50 			"ANE"			6
	AC ^= EX

58 			"ORE"			6
	AC |= EX
	
60 			"XRE"			6
	AC ^= EX
	
68 			"DAE"			11
	MB = EX
	_DecimalAdd()

70 			"ADE"			7
	MB = EX
	_BinaryAdd()

78 			"CAE"			8
	MB = EX ^ 0xFF
	_BinaryAdd()

// ***********************************************************************************************************
//										Pointer register move instructions
// ***********************************************************************************************************

30-33 		"XPAL %P"		8
	temp8 = %P;%P = (%P & 0xFF00) | AC;AC = temp8

34-37 		"XPAH %P"		8
	temp8 = %P >> 8;%P = (%P & 0x00FF) | (AC << 8);AC = temp8

3C-3F 		"XPPC %P"		7
	temp16 = P0;P0 = %P;%P = temp16

// ***********************************************************************************************************
//									 Shift, Rotate, Serial I/O Instructions
// ***********************************************************************************************************

19 			"SIO"			5
	EX = EX >> 1

1C 			"SR"			5
	AC = AC >> 1

1D 			"SRL"			5
	AC = (AC >> 1) | (carryFlag << 7)

1E 			"RR"			5
	AC = ((AC >> 1) | (AC << 7)) & 0xFF

1F 			"RRL"			5
	temp8 = AC & 1
	AC = (AC >> 1) | (carryFlag << 7)
	carryFlag = temp8

// ***********************************************************************************************************
//										Single byte miscellaneous instructions
// ***********************************************************************************************************

00		"HALT"				8

02 		"CCL"				5
	carryFlag = 0

03 		"SCL"				5
	carryFlag = 1

04 		"DINT"				6
	SR &= 0xF7

05 		"IEN"				6
	SR |= 0x08

06 		"CSA"				5
	AC = _GetStatusReg()

07 		"CAS"				6
	SR = AC
	carryFlag = (AC >> 7) & 1
	overflowFlag = (AC >> 6) & 1
	UPDATEFLAGS(SR & 0x7)

08 		"NOP"				6
	

	