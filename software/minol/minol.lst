 AS V1.42 Beta [Bld 102] - source file minol.asm - page 1 - 1/18/2016 18:16:22


       1/       0 :                     ; ****************************************************************************************************************
       2/       0 :                     ; ****************************************************************************************************************
       3/       0 :                     ;
       4/       0 :                     ;												Minol ROM Image
       5/       0 :                     ;
       6/       0 :                     ; ****************************************************************************************************************
       7/       0 :                     ; ****************************************************************************************************************
       8/       0 :                     
       9/       0 :                     	cpu 	sc/mp
      10/       0 :                     
      11/       0 :                     	include source\memorymacros.asm 							; Memory allocation and Macro definition.	
(1)    1/       0 :                     ; ****************************************************************************************************************
(1)    2/       0 :                     ; ****************************************************************************************************************
(1)    3/       0 :                     ;
(1)    4/       0 :                     ;										Memory and Macro Allocation.
(1)    5/       0 :                     ;	
(1)    6/       0 :                     ; ****************************************************************************************************************
(1)    7/       0 :                     ; ****************************************************************************************************************
(1)    8/       0 :                     
(1)    9/       0 : =0x3                OSMathLibrary = 0x0003 											; the Maths library is here.
(1)   10/       0 : =0x168              BootMonitor = 0x168 											; address to boot monitor
(1)   11/       0 :                     
(1)   12/       0 : =0x3                Print = 0x0003
(1)   13/       0 : =0x5                GetChar = 0x0005
(1)   14/       0 : =0x7                GetString = 0x0007
(1)   15/       0 :                     
(1)   16/       0 :                     ; ****************************************************************************************************************
(1)   17/       0 :                     ;												 Memory Allocation
(1)   18/       0 :                     ; ****************************************************************************************************************
(1)   19/       0 :                     
(1)   20/       0 : =0xC00              ScreenMirror = 0xC00 											; Screen mirror, 128 bytes, 256 byte page boundary.
(1)   21/       0 : =0xC80              ScreenCursor = ScreenMirror+0x80  								; Position on that screen (00..7F)
(1)   22/       0 :                     
(1)   23/       0 : =0xC90              SystemMemory = 0xC90 											; System Memory
(1)   24/       0 :                     
(1)   25/       0 : =0xC8E              RandomSeed = SystemMemory-2										; Random Seed Value (2 bytes)
(1)   26/       0 : =0xC8D              CurrentLine = SystemMemory-3 									; Current Line Number (1 byte)
(1)   27/       0 : =0xC90              Variables = SystemMemory 										; Variables (26 bytes)
(1)   28/       0 :                     
(1)   29/       0 : =0xCB0              KeyboardBuffer = SystemMemory+32 								; Keyboard input buffer
(1)   30/       0 : =0x48               KeyboardBufferSize = 72 										; Number of characters allowed to be typed in.
(1)   31/       0 :                     
(1)   32/       0 : =0x1004             ProgramBase = 0x1004 											; Program memory here.
(1)   33/       0 :                     
(1)   34/       0 : =0xFD               Marker1 = 	0xFD 												; Markers indicating "Code here"
(1)   35/       0 : =0xB5               Marker2 = 	0xB5
(1)   36/       0 : =0xAE               Marker3 = 	0xAE
(1)   37/       0 : =0x76               Marker4 = 	0x76
(1)   38/       0 :                     
(1)   39/       0 :                     ; ****************************************************************************************************************
(1)   40/       0 :                     ;														Macros
(1)   41/       0 :                     ; ****************************************************************************************************************
(1)   42/       0 :                     
(1)   43/       0 :                     lpi	macro	ptr,addr											; load pointer register with constant
(1)   44/       0 :                     	ldi 	(addr) / 256
(1)   45/       0 :                     	xpah 	ptr
(1)   46/       0 :                     	ldi 	(addr) & 255
(1)   47/       0 :                     	xpal 	ptr
(1)   48/       0 :                     	endm
(1)   49/       0 :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm(memorymacros.asm) - page 2 - 1/18/2016 18:16:22


(1)   50/       0 :                     pushp macro ptr 												; push pointer register on stack
(1)   51/       0 :                     	xpah 	ptr
(1)   52/       0 :                     	st 		@-1(p2)
(1)   53/       0 :                     	xpal 	ptr
(1)   54/       0 :                     	st 		@-1(p2)
(1)   55/       0 :                     	endm
(1)   56/       0 :                     
(1)   57/       0 :                     pullp macro ptr 												; pull pointer register off stack
(1)   58/       0 :                     	ld 		@1(p2)
(1)   59/       0 :                     	xpal 	ptr
(1)   60/       0 :                     	ld 		@1(p2)
(1)   61/       0 :                     	xpah 	ptr
(1)   62/       0 :                     	endm
(1)   63/       0 :                     
(1)   64/       0 :                     pushe macro 													; push E on stack
(1)   65/       0 :                     	lde
(1)   66/       0 :                     	st 		@-1(p2)
(1)   67/       0 :                     	endm
(1)   68/       0 :                     
(1)   69/       0 :                     pulle macro 													; pull E off stack
(1)   70/       0 :                     	ld 		@1(p2)
(1)   71/       0 :                     	xae
(1)   72/       0 :                     	endm
(1)   73/       0 :                     
(1)   74/       0 :                     pusha macro 													; push A on stack
(1)   75/       0 :                     	st 		@-1(p2)
(1)   76/       0 :                     	endm
(1)   77/       0 :                     
(1)   78/       0 :                     pulla macro
(1)   79/       0 :                     	ld 		@1(p2)
(1)   80/       0 :                     	endm
(1)   81/       0 :                     
(1)   82/       0 :                     setv macro ch,value 											; sets a variable to a value, assumes P3 = Variables.
(1)   83/       0 :                     	ldi 	(value) & 255
(1)   84/       0 :                     	st 		((ch) - 'A')(p3)
(1)   85/       0 :                     	endm
(1)   86/       0 :                     
(1)   87/       0 :                     code macro lineNo,code 											; a debugging macro, which fakes up a line of code.
(1)   88/       0 :                     	db 		strlen(code)+3 										; one byte offset to next (255 = End of code)
(1)   89/       0 :                     	db 		lineNo 												; one byte line number 
(1)   90/       0 :                     	db 		code,0 												; ASCIIZ string
(1)   91/       0 :                     	endm
(1)   92/       0 :                     
(1)   93/       0 :                     cmd macro 	c1,c2,length,code
(1)   94/       0 :                     	db 		c1,c2 												; first and second characters
(1)   95/       0 :                     	db 		(length)-1											; length -1 (first char already skipped)
(1)   96/       0 :                     	dw 		(code)-1 											; execution point for prefetch.
(1)   97/       0 :                     	endm
      12/       0 :                     	include source\errors.asm 									; Error codes
(1)    1/       0 :                     ; ****************************************************************************************************************
(1)    2/       0 :                     ; ****************************************************************************************************************
(1)    3/       0 :                     ;
(1)    4/       0 :                     ;												Error Codes
(1)    5/       0 :                     ;
(1)    6/       0 :                     ; ****************************************************************************************************************
(1)    7/       0 :                     ; ****************************************************************************************************************
(1)    8/       0 :                     
(1)    9/       0 : =0xFF               ERRC_END = 0xFF													; psuedo error, program stopped. Does "OK" as for no error.
(1)   10/       0 : =0x31               ERRC_LABEL = '1' 												; Label does not exist (e.g. GOTO)
(1)   11/       0 : =0x32               ERRC_UNKNOWN = '2'												; Unknown instruction
 AS V1.42 Beta [Bld 102] - source file minol.asm(errors.asm) - page 3 - 1/18/2016 18:16:22


(1)   12/       0 : =0x34               ERRC_TERM = '4' 												; Illegal term/expression
(1)   13/       0 : =0x35               ERRC_SYNTAX = '5'												; Syntax Error
(1)   14/       0 : =0x36               ERRC_MEMORY = '6' 												; Out of memory
(1)   15/       0 : =0x37               ERRC_DIVZERO = '7' 												; Division by Zero Error.
(1)   16/       0 : =0x38               ERRC_BREAK = '8' 												; Break.
      13/       0 :                     
      14/       0 :                     ; ****************************************************************************************************************
      15/       0 :                     ;													Main Program
      16/       0 :                     ; ****************************************************************************************************************
      17/       0 :                     
      18/    9000 :                     	org 	0x9000 												; the ROM starts here
      19/    9000 :                     
      20/    9000 : 68                  	db 		0x68												; this makes it boot straight into this ROM.
      21/    9001 : (MACRO)             	lpi 	p2,0xFFF											; set up top stack value
      21/    9001 : C4 0F                       ldi     (0XFFF) / 256
      21/    9003 : 36                          xpah    P2
      21/    9004 : C4 FF                       ldi     (0XFFF) & 255
      21/    9006 : 32                          xpal    P2
      22/    9007 :                     FindTOS:
      23/    9007 : C4 75               	ldi 	0x75												; can we write there, if so, found TOS.
      24/    9009 : CA 00               	st 		(p2)
      25/    900B : E2 00               	xor 	(p2)
      26/    900D : 98 04               	jz 		StackFound
      27/    900F : C2 C0               	ld 		-64(p2) 											; wind backwards 64 bytes
      28/    9011 : 90 F4               	jmp 	FindTOS	
      29/    9013 :                     StackFound:
      30/    9013 :                     
      31/    9013 :                      	; 		include democode.asm
      32/    9013 :                     
      33/    9013 :                     StartUp:
      34/    9013 : (MACRO)             	lpi 	p3,Print-1											; Print Boot Message
      34/    9013 : C4 00                       ldi     (PRINT-1) / 256
      34/    9015 : 37                          xpah    P3
      34/    9016 : C4 02                       ldi     (PRINT-1) & 255
      34/    9018 : 33                          xpal    P3
      35/    9019 : (MACRO)             	lpi 	p1,BootMessage
      35/    9019 : C4 90                       ldi     (BOOTMESSAGE) / 256
      35/    901B : 35                          xpah    P1
      35/    901C : C4 4F                       ldi     (BOOTMESSAGE) & 255
      35/    901E : 31                          xpal    P1
      36/    901F : C4 00               	ldi 	0
      37/    9021 : 3F                  	xppc 	p3
      38/    9022 :                     
      39/    9022 : (MACRO)             	lpi 	p3,ProgramBase 										; check to see if MINOL code resident.
      39/    9022 : C4 10                       ldi     (PROGRAMBASE) / 256
      39/    9024 : 37                          xpah    P3
      39/    9025 : C4 04                       ldi     (PROGRAMBASE) & 255
      39/    9027 : 33                          xpal    P3
      40/    9028 : C3 FC               	ld 		-4(p3) 												; which requires the 4 byte markers to be loaded.
      41/    902A : E4 FD               	xri 	Marker1
      42/    902C : 9C 1A               	jnz 	RunNew
      43/    902E : C3 FD               	ld 		-3(p3) 			
      44/    9030 : E4 B5               	xri 	Marker2
      45/    9032 : 9C 14               	jnz 	RunNew
      46/    9034 : C3 FE               	ld 		-2(p3) 			
      47/    9036 : E4 AE               	xri 	Marker3
      48/    9038 : 9C 0E               	jnz 	RunNew
      49/    903A : C3 FF               	ld 		-1(p3) 			
      50/    903C : E4 76               	xri 	Marker4
      51/    903E : 9C 08               	jnz 	RunNew
 AS V1.42 Beta [Bld 102] - source file minol.asm - page 4 - 1/18/2016 18:16:22


      52/    9040 :                     
      53/    9040 : (MACRO)             	lpi 	p3,ConsoleStart-1 									; run the console if code present
      53/    9040 : C4 96                       ldi     (CONSOLESTART-1) / 256
      53/    9042 : 37                          xpah    P3
      53/    9043 : C4 BA                       ldi     (CONSOLESTART-1) & 255
      53/    9045 : 33                          xpal    P3
      54/    9046 : 03                  	scl 														; non-error (so it prints ok)
      55/    9047 : 3F                  	xppc	p3
      56/    9048 :                     
      57/    9048 :                     RunNew:															; otherwise execute NEW.
      58/    9048 : (MACRO)             	lpi 	p3,CMD_New-1
      58/    9048 : C4 91                       ldi     (CMD_NEW-1) / 256
      58/    904A : 37                          xpah    P3
      58/    904B : C4 48                       ldi     (CMD_NEW-1) & 255
      58/    904D : 33                          xpal    P3
      59/    904E : 3F                  	xppc 	p3
      60/    904F :                     
      61/    904F :                     
      62/    904F :                     
      63/    904F :                     BootMessage:
      64/    904F : 0C 2A 2A 20 4D 49   	db 		12,"** MINOL **",13,"V0.94 PSR 2016",13,0
                    4E 4F 4C 20 2A 2A 
                    0D 56 30 2E 39 34 
                    20 50 53 52 20 32 
                    30 31 36 0D 00 
      65/    906C :                     
      66/    906C :                     ; ****************************************************************************************************************
      67/    906C :                     ;													Source Files
      68/    906C :                     ; ****************************************************************************************************************
      69/    906C :                     
      70/    906C :                     	include source\itoa.asm 									; print integer routine.
(1)    1/    906C :                     ; ****************************************************************************************************************
(1)    2/    906C :                     ; ****************************************************************************************************************
(1)    3/    906C :                     ;
(1)    4/    906C :                     ;											Integer (Byte) Printer
(1)    5/    906C :                     ;											======================
(1)    6/    906C :                     ;	
(1)    7/    906C :                     ;	Print Integer in E as String to output routine. Uses stack space as temporary storage. Changes A/E but not
(1)    8/    906C :                     ;	P1 or P2. Unsigned.
(1)    9/    906C :                     ;	
(1)   10/    906C :                     ; ****************************************************************************************************************
(1)   11/    906C :                     ; ****************************************************************************************************************
(1)   12/    906C :                     
(1)   13/    906C :                     PrintInteger:
(1)   14/    906C : (MACRO)             	pushp 	p3													; save P3
(1)   14/    906C : 37                          xpah    P3
(1)   14/    906D : CE FF                       st              @-1(p2)
(1)   14/    906F : 33                          xpal    P3
(1)   14/    9070 : CE FF                       st              @-1(p2)
(1)   15/    9072 : C4 FF               	ldi 	0xFF 												; use $FF to mark stack top.
(1)   16/    9074 : CE FF               	st 		@-1(p2)
(1)   17/    9076 : CE FD               	st 		@-3(p2) 											; allocate space for results.
(1)   18/    9078 : C4 64               	ldi 	100 												; start with 100s
(1)   19/    907A :                     __PIDivideOuter:
(1)   20/    907A : CA 01               	st 		1(p2) 												; save subtractor at stack (1)
(1)   21/    907C : C4 FF               	ldi 	0xFF 												; clear stack (0) (count) to -1 because we pre-increment.
(1)   22/    907E : CA 00               	st 		0(p2)
(1)   23/    9080 :                     __PIDivideLoop:
(1)   24/    9080 : AA 00               	ild 	0(p2) 												; bump the counter.
(1)   25/    9082 : 40                  	lde 														; get value
 AS V1.42 Beta [Bld 102] - source file minol.asm(itoa.asm) - page 5 - 1/18/2016 18:16:22


(1)   26/    9083 : 03                  	scl 														; subtract divider
(1)   27/    9084 : FA 01               	cad 	1(p2) 												
(1)   28/    9086 : 01                  	xae 														; put back in E
(1)   29/    9087 : 06                  	csa 														; if no borrow
(1)   30/    9088 : D4 80               	ani 	0x80
(1)   31/    908A : 9C F4               	jnz 	__PIDivideLoop 
(1)   32/    908C : 40                  	lde 														; add the divider.
(1)   33/    908D : 02                  	ccl
(1)   34/    908E : F2 01               	add 	1(p2)
(1)   35/    9090 : 01                  	xae
(1)   36/    9091 : C2 01               	ld 		1(p2) 												; get the divider back
(1)   37/    9093 : E4 0A               	xri 	10 													; is it 10 ?
(1)   38/    9095 : 98 06               	jz 		__PIDivideEnd 										; we have finished the division bit.
(1)   39/    9097 : C6 01               	ld 		@1(p2) 												; push stack up one.
(1)   40/    9099 : C4 0A               	ldi 	10 													; and divide by 10
(1)   41/    909B : 90 DD               	jmp 	__PIDivideOuter
(1)   42/    909D :                     ;
(1)   43/    909D :                     __PIDivideEnd:
(1)   44/    909D :                     
(1)   45/    909D : 40                  	lde 														; write out the last digit.
(1)   46/    909E : CA 01               	st 		1(p2)
(1)   47/    90A0 : (MACRO)             	lpi 	p3,Print-1 											; point P3 to the print routine.
(1)   47/    90A0 : C4 00                       ldi     (PRINT-1) / 256
(1)   47/    90A2 : 37                          xpah    P3
(1)   47/    90A3 : C4 02                       ldi     (PRINT-1) & 255
(1)   47/    90A5 : 33                          xpal    P3
(1)   48/    90A6 :                     ;
(1)   49/    90A6 :                     ;	Remove leading spaces
(1)   50/    90A6 :                     ;
(1)   51/    90A6 : C6 FF               	ld 		@-1(p2) 											; look at first digit, if non-zero go to print
(1)   52/    90A8 : 9C 08               	jnz 	__PIPrint 
(1)   53/    90AA : C6 01               	ld 		@1(p2) 												; skip it, eliminate trailing zeros.
(1)   54/    90AC : C2 00               	ld 		(p2) 												; now look at second digit
(1)   55/    90AE : 9C 02               	jnz 	__PIPrint 											; skip it, eliminate trailing zeros.
(1)   56/    90B0 : C6 01               	ld 		@1(p2)
(1)   57/    90B2 :                     ;
(1)   58/    90B2 :                     __PIPrint:
(1)   59/    90B2 : C6 01               	ld 		@1(p2) 												; read digit
(1)   60/    90B4 : D4 80               	ani 	0x80												; if found -ve value then exit.
(1)   61/    90B6 : 9C 07               	jnz 	__PIExit
(1)   62/    90B8 : C2 FF               	ld 		-1(p2) 												; re-read it.
(1)   63/    90BA : DC 30               	ori 	'0'													; make ASCII
(1)   64/    90BC : 3F                  	xppc 	p3 													; print it
(1)   65/    90BD : 90 F3               	jmp 	__PIPrint 											; and keep printing.
(1)   66/    90BF :                     ;
(1)   67/    90BF :                     __PIExit:
(1)   68/    90BF : (MACRO)             	pullp 	p3 													; restore P3
(1)   68/    90BF : C6 01                       ld              @1(p2)
(1)   68/    90C1 : 33                          xpal    P3
(1)   68/    90C2 : C6 01                       ld              @1(p2)
(1)   68/    90C4 : 37                          xpah    P3
(1)   69/    90C5 : 3F                  	xppc 	p3 													; and exit
(1)   70/    90C6 :                     	
(1)   71/    90C6 :                     __PIFail:														; because we dropped this setting up P3 afterwards...
(1)   72/    90C6 : 90 FE               	jmp 	__PIFail
      71/    90C8 :                     	include source\atoi.asm 									; decode integer routine.
(1)    1/    90C8 :                     ; ****************************************************************************************************************
(1)    2/    90C8 :                     ; ****************************************************************************************************************
(1)    3/    90C8 :                     ;
(1)    4/    90C8 :                     ;								Try to extract integer into E. CY/L = 0 Error, P1 data
 AS V1.42 Beta [Bld 102] - source file minol.asm(atoi.asm) - page 6 - 1/18/2016 18:16:22


(1)    5/    90C8 :                     ;	
(1)    6/    90C8 :                     ; ****************************************************************************************************************
(1)    7/    90C8 :                     ; ****************************************************************************************************************
(1)    8/    90C8 :                     
(1)    9/    90C8 :                     GetConstant:
(1)   10/    90C8 : C4 00               	ldi 	0 													; number of characters read, push on stack.
(1)   11/    90CA : CE FF               	st 		@-1(p2)
(1)   12/    90CC : 01                  	xae 														; reset initial value.
(1)   13/    90CD :                     GCO_Loop:
(1)   14/    90CD : C5 01               	ld 		@1(p1) 												; get and bump
(1)   15/    90CF : E4 20               	xri 	' '													; skipping over spaces
(1)   16/    90D1 : 98 FA               	jz 		GCO_Loop
(1)   17/    90D3 : C5 FF               	ld 		@-1(p1) 											; get character undoing bump.
(1)   18/    90D5 : 02                  	ccl
(1)   19/    90D6 : F4 C6               	adi 	255-'9'												; check range 0-9.
(1)   20/    90D8 : 94 17               	jp 		GCO_Exit
(1)   21/    90DA : F4 8A               	adi 	128+10
(1)   22/    90DC : 94 13               	jp 		GCO_Exit
(1)   23/    90DE :                     
(1)   24/    90DE : 02                  	ccl
(1)   25/    90DF : 40                  	lde 														; A = E 														
(1)   26/    90E0 : 70                  	ade 														; A = E * 2
(1)   27/    90E1 : 70                  	ade 														; A = E * 3
(1)   28/    90E2 : 70                  	ade 														; A = E * 4
(1)   29/    90E3 : 70                  	ade 														; A = E * 5
(1)   30/    90E4 : 01                  	xae 														; E = E * 5
(1)   31/    90E5 : C5 01               	ld 		@1(p1) 												; get character and bump over.
(1)   32/    90E7 : D4 0F               	ani 	0x0F 												; make number
(1)   33/    90E9 : 02                  	ccl
(1)   34/    90EA : 70                  	ade 														; add E * 5 twice.
(1)   35/    90EB : 70                  	ade
(1)   36/    90EC : 01                  	xae 														; back in E
(1)   37/    90ED : AA 00               	ild 	(p2)												; bump count.
(1)   38/    90EF : 90 DC               	jmp 	GCO_Loop											; try next.
(1)   39/    90F1 :                     ;
(1)   40/    90F1 :                     GCO_Exit:
(1)   41/    90F1 : C6 01               	ld 		@1(p2)												; get count.
(1)   42/    90F3 : 02                  	ccl
(1)   43/    90F4 : F4 FF               	adi 	255 												; CY/L will be set if one or more characters read in
(1)   44/    90F6 : 06                  	csa 														; A contains CY/L flag now
(1)   45/    90F7 : 3F                  	xppc 	p3 													; return.
(1)   46/    90F8 :                     	
      72/    90F8 :                     	include source\execute.asm 									; statement exec main loop
(1)    1/    90F8 :                     ; ****************************************************************************************************************
(1)    2/    90F8 :                     ; ****************************************************************************************************************
(1)    3/    90F8 :                     ;
(1)    4/    90F8 :                     ;										Instruction Execution
(1)    5/    90F8 :                     ;	
(1)    6/    90F8 :                     ; ****************************************************************************************************************
(1)    7/    90F8 :                     ; ****************************************************************************************************************
(1)    8/    90F8 :                     
(1)    9/    90F8 :                     ; ****************************************************************************************************************
(1)   10/    90F8 :                     ;							Source codes for execution, with skip-over go here
(1)   11/    90F8 :                     ; ****************************************************************************************************************
(1)   12/    90F8 :                     
(1)   13/    90F8 :                     	include source\commands\os.asm 								; OS
(2)    1/    90F8 :                     ; ****************************************************************************************************************
(2)    2/    90F8 :                     ; ****************************************************************************************************************
(2)    3/    90F8 :                     ;
(2)    4/    90F8 :                     ;												OS command
 AS V1.42 Beta [Bld 102] - source file minol.asm(os.asm) - page 7 - 1/18/2016 18:16:22


(2)    5/    90F8 :                     ;	
(2)    6/    90F8 :                     ; ****************************************************************************************************************
(2)    7/    90F8 :                     ; ****************************************************************************************************************
(2)    8/    90F8 :                     
(2)    9/    90F8 : 90 07               	jmp 	COS_Over
(2)   10/    90FA :                     
(2)   11/    90FA :                     CMD_OS:
(2)   12/    90FA : (MACRO)             	lpi 	p3,BootMonitor-1 									; monitor re-entry point
(2)   12/    90FA : C4 01                       ldi     (BOOTMONITOR-1) / 256
(2)   12/    90FC : 37                          xpah    P3
(2)   12/    90FD : C4 67                       ldi     (BOOTMONITOR-1) & 255
(2)   12/    90FF : 33                          xpal    P3
(2)   13/    9100 : 3F                  	xppc 	p3													; go there.
(2)   14/    9101 :                     
(2)   15/    9101 :                     COS_Over:
(1)   14/    9101 :                     	include source\commands\list.asm 							; LIST
(2)    1/    9101 :                     ; ****************************************************************************************************************
(2)    2/    9101 :                     ; ****************************************************************************************************************
(2)    3/    9101 :                     ;
(2)    4/    9101 :                     ;												LIST command
(2)    5/    9101 :                     ;	
(2)    6/    9101 :                     ; ****************************************************************************************************************
(2)    7/    9101 :                     ; ****************************************************************************************************************
(2)    8/    9101 :                     
(2)    9/    9101 : 90 44               	jmp		CLI_Over
(2)   10/    9103 :                     
(2)   11/    9103 :                     CMD_List:
(2)   12/    9103 : (MACRO)             	lpi 	p1,ProgramBase 										; point P1 to first line.
(2)   12/    9103 : C4 10                       ldi     (PROGRAMBASE) / 256
(2)   12/    9105 : 35                          xpah    P1
(2)   12/    9106 : C4 04                       ldi     (PROGRAMBASE) & 255
(2)   12/    9108 : 31                          xpal    P1
(2)   13/    9109 : C4 00               	ldi 	0 													; clear counter. used for Speccy style list.
(2)   14/    910B : CE FF               	st 		@-1(p2)
(2)   15/    910D :                     CLI_Loop:
(2)   16/    910D : C5 01               	ld 		@1(p1) 												; check if finished
(2)   17/    910F : D4 80               	ani 	0x80
(2)   18/    9111 : 9C 2E               	jnz 	CLI_End
(2)   19/    9113 : C5 01               	ld 		@1(p1) 												; get line number into E
(2)   20/    9115 : 01                  	xae 
(2)   21/    9116 : (MACRO)             	lpi 	p3,PrintInteger-1 									; and print it.
(2)   21/    9116 : C4 90                       ldi     (PRINTINTEGER-1) / 256
(2)   21/    9118 : 37                          xpah    P3
(2)   21/    9119 : C4 6B                       ldi     (PRINTINTEGER-1) & 255
(2)   21/    911B : 33                          xpal    P3
(2)   22/    911C : 3F                  	xppc 	p3
(2)   23/    911D : (MACRO)             	lpi 	p3,Print-1
(2)   23/    911D : C4 00                       ldi     (PRINT-1) / 256
(2)   23/    911F : 37                          xpah    P3
(2)   23/    9120 : C4 02                       ldi     (PRINT-1) & 255
(2)   23/    9122 : 33                          xpal    P3
(2)   24/    9123 : C4 20               	ldi 	' '													; print space
(2)   25/    9125 : 3F                  	xppc 	p3
(2)   26/    9126 :                     ;
(2)   27/    9126 :                     CLI_Line:
(2)   28/    9126 : C5 01               	ld 		@1(p1) 												; get character
(2)   29/    9128 : 98 03               	jz 		CLI_EndLine											; if zero, do next line.
(2)   30/    912A : 3F                  	xppc 	p3 													; print it
(2)   31/    912B : 90 F9               	jmp 	CLI_Line
(2)   32/    912D :                     ;
 AS V1.42 Beta [Bld 102] - source file minol.asm(list.asm) - page 8 - 1/18/2016 18:16:22


(2)   33/    912D :                     CLI_EndLine:
(2)   34/    912D : C4 0D               	ldi 	13													; new line
(2)   35/    912F : 3F                  	xppc 	p3
(2)   36/    9130 : AA 00               	ild 	(p2) 												; bump counter
(2)   37/    9132 : D4 03               	ani 	0x03 												; stop every 3 lines
(2)   38/    9134 : 9C D7               	jnz 	CLI_Loop 											; keep going.
(2)   39/    9136 : (MACRO)             	lpi 	p3,GetChar-1 										; get a keystroke
(2)   39/    9136 : C4 00                       ldi     (GETCHAR-1) / 256
(2)   39/    9138 : 37                          xpah    P3
(2)   39/    9139 : C4 04                       ldi     (GETCHAR-1) & 255
(2)   39/    913B : 33                          xpal    P3
(2)   40/    913C : 3F                  	xppc 	p3
(2)   41/    913D : E4 20               	xri 	' '													; if space pressed
(2)   42/    913F : 98 CC               	jz 		CLI_Loop 											; and do next line.
(2)   43/    9141 :                     
(2)   44/    9141 :                     CLI_End:
(2)   45/    9141 : C6 01               	ld 		@1(p2) 												; drop counter
(2)   46/    9143 : C4 FF               	ldi 	ERRC_End											; fake error to end after LIST as destroys P1.
(2)   47/    9145 : 01                  	xae
(2)   48/    9146 : 02                  	ccl
(2)   49/    9147 :                     
(2)   50/    9147 :                     CLI_Over:
(2)   51/    9147 :                     
(2)   52/    9147 :                     
(1)   15/    9147 :                     	include source\commands\new_end.asm 						; NEW and END
(2)    1/    9147 :                     ; ****************************************************************************************************************
(2)    2/    9147 :                     ; ****************************************************************************************************************
(2)    3/    9147 :                     ;
(2)    4/    9147 :                     ;												NEW and END
(2)    5/    9147 :                     ;	
(2)    6/    9147 :                     ; ****************************************************************************************************************
(2)    7/    9147 :                     ; ****************************************************************************************************************
(2)    8/    9147 :                     
(2)    9/    9147 : 90 1E               	jmp 	CNE_Over
(2)   10/    9149 :                     
(2)   11/    9149 :                     ; ****************************************************************************************************************
(2)   12/    9149 :                     ;						NEW (Erase program) also executes END in case in running program
(2)   13/    9149 :                     ; ****************************************************************************************************************
(2)   14/    9149 :                     
(2)   15/    9149 :                     CMD_New:
(2)   16/    9149 : (MACRO)             	lpi 	p3,ProgramBase 										; write $FF at program base
(2)   16/    9149 : C4 10                       ldi     (PROGRAMBASE) / 256
(2)   16/    914B : 37                          xpah    P3
(2)   16/    914C : C4 04                       ldi     (PROGRAMBASE) & 255
(2)   16/    914E : 33                          xpal    P3
(2)   17/    914F : C4 FF               	ldi 	0xFF
(2)   18/    9151 : CB 00               	st 		0(p3) 												; this erases the program
(2)   19/    9153 : C4 FD               	ldi 	Marker1 											; write the program-code-marker out.
(2)   20/    9155 : CB FC               	st 		-4(p3)
(2)   21/    9157 : C4 B5               	ldi 	Marker2
(2)   22/    9159 : CB FD               	st 		-3(p3)
(2)   23/    915B : C4 AE               	ldi 	Marker3
(2)   24/    915D : CB FE               	st 		-2(p3)
(2)   25/    915F : C4 76               	ldi 	Marker4
(2)   26/    9161 : CB FF               	st 		-1(p3)
(2)   27/    9163 :                     
(2)   28/    9163 :                     ; ****************************************************************************************************************
(2)   29/    9163 :                     ;													END program
(2)   30/    9163 :                     ; ****************************************************************************************************************
(2)   31/    9163 :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm(new_end.asm) - page 9 - 1/18/2016 18:16:22


(2)   32/    9163 :                     CMD_End:
(2)   33/    9163 : 02                  	ccl 														; we cause an error, but it is ERRC_End which is 
(2)   34/    9164 : C4 FF               	ldi 	ERRC_End 											; not an error and not reported as such.
(2)   35/    9166 : 01                  	xae
(2)   36/    9167 :                     
(2)   37/    9167 :                     CNE_Over:
(1)   16/    9167 :                     	include source\commands\input.asm 							; IN<put>
(2)    1/    9167 :                     ; ****************************************************************************************************************
(2)    2/    9167 :                     ; ****************************************************************************************************************
(2)    3/    9167 :                     ;
(2)    4/    9167 :                     ;												IN command
(2)    5/    9167 :                     ;	
(2)    6/    9167 :                     ; ****************************************************************************************************************
(2)    7/    9167 :                     ; ****************************************************************************************************************
(2)    8/    9167 :                     
(2)    9/    9167 : 90 30               	jmp		CIN_Over2
(2)   10/    9169 :                     
(2)   11/    9169 :                     CMD_In:
(2)   12/    9169 : (MACRO)             	lpi 	p3,EvaluateAddressPair-1 							; set P3 to call evaluate pair (H,L)
(2)   12/    9169 : C4 95                       ldi     (EVALUATEADDRESSPAIR-1) / 256
(2)   12/    916B : 37                          xpah    P3
(2)   12/    916C : C4 7E                       ldi     (EVALUATEADDRESSPAIR-1) & 255
(2)   12/    916E : 33                          xpal    P3
(2)   13/    916F : 03                  	scl 														; indicates no error
(2)   14/    9170 : C1 00               	ld	 	(p1) 												; look at first character
(2)   15/    9172 : 98 25               	jz 		CIN_Over2 											; if zero or ':' then end of IN
(2)   16/    9174 : E4 3A               	xri 	':'
(2)   17/    9176 : 98 21               	jz 		CIN_Over2
(2)   18/    9178 : C5 01               	ld 		@1(p1) 												; fetch and bump
(2)   19/    917A : E4 2C               	xri 	','													; ignora commas
(2)   20/    917C : 98 EB               	jz 		CMD_In
(2)   21/    917E : E4 0C               	xri 	' '!','												; ignore spaces.
(2)   22/    9180 : 98 E7               	jz 		CMD_In
(2)   23/    9182 : E4 08               	xri 	'('!' '												; open bracket is Input to (H,L)
(2)   24/    9184 : 98 22               	jz 		CIN_Memory 
(2)   25/    9186 : E4 0C               	xri 	'$'!'('												; $(H,L) is input to memory.
(2)   26/    9188 : 98 59               	jz 		CIN_String
(2)   27/    918A :                     
(2)   28/    918A :                     ; ****************************************************************************************************************
(2)   29/    918A :                     ;											Check for A-Z input.
(2)   30/    918A :                     ; ****************************************************************************************************************
(2)   31/    918A :                     
(2)   32/    918A : C1 FF               	ld 		-1(p1)												; get letter of variable
(2)   33/    918C : 02                  	ccl
(2)   34/    918D : F4 A5               	adi 	255-'Z'												; check if > 'Z'
(2)   35/    918F : 94 04               	jp 		CIN_Syntax 				
(2)   36/    9191 : F4 1A               	adi 	26 													; will be +ve if A..Z now
(2)   37/    9193 : 94 06               	jp 		CIN_Variable
(2)   38/    9195 :                     
(2)   39/    9195 :                     ; ****************************************************************************************************************
(2)   40/    9195 :                     ;									Syntax error - not (x,x) $(x,x) or A..Z
(2)   41/    9195 :                     ; ****************************************************************************************************************
(2)   42/    9195 :                     
(2)   43/    9195 :                     CIN_Syntax:
(2)   44/    9195 : C4 35               	ldi 	ERRC_Syntax
(2)   45/    9197 : 01                  	xae
(2)   46/    9198 : 02                  	ccl
(2)   47/    9199 :                     CIN_Over2:
(2)   48/    9199 : 90 6C               	jmp 	CIN_Over
(2)   49/    919B :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm(input.asm) - page 10 - 1/18/2016 18:16:22


(2)   50/    919B :                     ; ****************************************************************************************************************
(2)   51/    919B :                     ;										Input to variable in A (0-25)
(2)   52/    919B :                     ; ****************************************************************************************************************
(2)   53/    919B :                     
(2)   54/    919B :                     CIN_Variable:
(2)   55/    919B : 02                  	ccl 														; add variable number 0-25 to Variables to get an address
(2)   56/    919C : F4 90               	adi 	Variables & 255
(2)   57/    919E : CA FE               	st 		-2(p2)
(2)   58/    91A0 : C4 0C               	ldi 	Variables / 256
(2)   59/    91A2 : F4 00               	adi 	0
(2)   60/    91A4 : CA FF               	st 		-1(p2)
(2)   61/    91A6 : 90 05               	jmp 	CIN_InputVariableOrMemory
(2)   62/    91A8 :                     
(2)   63/    91A8 :                     ; ****************************************************************************************************************
(2)   64/    91A8 :                     ;											Input to (<expr>,<expr>)
(2)   65/    91A8 :                     ; ****************************************************************************************************************
(2)   66/    91A8 :                     
(2)   67/    91A8 :                     CIN_Memory:
(2)   68/    91A8 : C5 FF               	ld 		@-1(p1)												; point to the bracket.
(2)   69/    91AA : 3F                  	xppc 	p3 													; push the H,L on the stack, without the stack being changed
(2)   70/    91AB : 94 5A               	jp 		CIN_Over 											; exit on error.
(2)   71/    91AD :                     
(2)   72/    91AD :                     ; ****************************************************************************************************************
(2)   73/    91AD :                     ;								Input to variable or memory address is hidden on TOS.
(2)   74/    91AD :                     ; ****************************************************************************************************************
(2)   75/    91AD :                     
(2)   76/    91AD :                     CIN_InputVariableOrMemory:
(2)   77/    91AD : C6 FE               	ld 		@-2(p2) 											; save the storage address as TOS "Make it visible"
(2)   78/    91AF : (MACRO)             	pushp 	p1 													; save P1 on stack
(2)   78/    91AF : 35                          xpah    P1
(2)   78/    91B0 : CE FF                       st              @-1(p2)
(2)   78/    91B2 : 31                          xpal    P1
(2)   78/    91B3 : CE FF                       st              @-1(p2)
(2)   79/    91B5 : (MACRO)             	lpi 	p3,GetString-1 										; read keyboard
(2)   79/    91B5 : C4 00                       ldi     (GETSTRING-1) / 256
(2)   79/    91B7 : 37                          xpah    P3
(2)   79/    91B8 : C4 06                       ldi     (GETSTRING-1) & 255
(2)   79/    91BA : 33                          xpal    P3
(2)   80/    91BB : (MACRO)             	lpi 	p1,KeyboardBuffer 									; point P1 to keyboard buffer.
(2)   80/    91BB : C4 0C                       ldi     (KEYBOARDBUFFER) / 256
(2)   80/    91BD : 35                          xpah    P1
(2)   80/    91BE : C4 B0                       ldi     (KEYBOARDBUFFER) & 255
(2)   80/    91C0 : 31                          xpal    P1
(2)   81/    91C1 : C4 48               	ldi 	KeyboardBufferSize 									; buffer size
(2)   82/    91C3 : 3F                  	xppc 	p3 													; read it in.
(2)   83/    91C4 :                     
(2)   84/    91C4 : (MACRO)             	lpi 	p3,GetConstant-1 									; extract constant to E if any
(2)   84/    91C4 : C4 90                       ldi     (GETCONSTANT-1) / 256
(2)   84/    91C6 : 37                          xpah    P3
(2)   84/    91C7 : C4 C7                       ldi     (GETCONSTANT-1) & 255
(2)   84/    91C9 : 33                          xpal    P3
(2)   85/    91CA : 3F                  	xppc 	p3
(2)   86/    91CB : D4 80               	ani 	0x80 												; if CY/L set, e.g. is it legal 
(2)   87/    91CD : 9C 03               	jnz 	CIN_StoreValue										; if so, store E at the address.
(2)   88/    91CF : C1 00               	ld 		(p1) 												; get the character code of the first letter
(2)   89/    91D1 : 01                  	xae 														; into E
(2)   90/    91D2 :                     CIN_StoreValue:
(2)   91/    91D2 : (MACRO)             	pullp 	p1 													; restore P1
(2)   91/    91D2 : C6 01                       ld              @1(p2)
(2)   91/    91D4 : 31                          xpal    P1
 AS V1.42 Beta [Bld 102] - source file minol.asm(input.asm) - page 11 - 1/18/2016 18:16:22


(2)   91/    91D5 : C6 01                       ld              @1(p2)
(2)   91/    91D7 : 35                          xpah    P1
(2)   92/    91D8 : C6 01               	ld 		@1(p2) 												; get low byte to P3.L
(2)   93/    91DA : 33                  	xpal 	p3 												
(2)   94/    91DB : C6 01               	ld 		@1(p2)												; get high byte to P3.H
(2)   95/    91DD : 37                  	xpah 	p3
(2)   96/    91DE : 40                  	lde 														; get E, value to store
(2)   97/    91DF : CB 00               	st 		(p3)												; and write it.
(2)   98/    91E1 :                     CMD_In2:
(2)   99/    91E1 : 90 86               	jmp 	CMD_In 												; and see if there is more to input
(2)  100/    91E3 :                     
(2)  101/    91E3 :                     ; ****************************************************************************************************************
(2)  102/    91E3 :                     ;												Input String to Memory
(2)  103/    91E3 :                     ; ****************************************************************************************************************
(2)  104/    91E3 :                     
(2)  105/    91E3 :                     CIN_String:
(2)  106/    91E3 : 3F                  	xppc 	p3 													; evaluate (H,L)
(2)  107/    91E4 : 94 21               	jp 		CIN_Over 											; exit on error.
(2)  108/    91E6 : C2 FF               	ld 		-1(p2) 												; read High
(2)  109/    91E8 : 35                  	xpah 	p1 													; put into P1.H
(2)  110/    91E9 : CA FF               	st 		-1(p2)
(2)  111/    91EB : C2 FE               	ld 		-2(p2)												; read Low
(2)  112/    91ED : 31                  	xpal 	p1 													; put into P1.L
(2)  113/    91EE : CE FE               	st 		@-2(p2) 											; save on stack
(2)  114/    91F0 : (MACRO)             	lpi 	p3,GetString-1 										; read keyboard
(2)  114/    91F0 : C4 00                       ldi     (GETSTRING-1) / 256
(2)  114/    91F2 : 37                          xpah    P3
(2)  114/    91F3 : C4 06                       ldi     (GETSTRING-1) & 255
(2)  114/    91F5 : 33                          xpal    P3
(2)  115/    91F6 : C4 48               	ldi 	KeyboardBufferSize 									; max size of input
(2)  116/    91F8 : 3F                  	xppc 	p3 													; read keyboard into address
(2)  117/    91F9 :                     
(2)  118/    91F9 :                     CIN_FindEnd:													; look for EOS (NULL)
(2)  119/    91F9 : C5 01               	ld 		@1(p1)
(2)  120/    91FB : 9C FC               	jnz 	CIN_FindEnd
(2)  121/    91FD : B9 FF               	dld 	-1(p1) 												; convert $00 to $FF
(2)  122/    91FF :                     
(2)  123/    91FF : C6 01               	ld 		@1(p2) 												; pop P1
(2)  124/    9201 : 31                  	xpal 	p1
(2)  125/    9202 : C6 01               	ld 		@1(p2)
(2)  126/    9204 : 35                  	xpah 	p1
(2)  127/    9205 : 90 DA               	jmp 	CMD_In2												; see if more input 
(2)  128/    9207 :                     
(2)  129/    9207 :                     CIN_Over:
(2)  130/    9207 :                     
(2)  131/    9207 :                     
(2)  132/    9207 :                     
(1)   17/    9207 :                     	include source\commands\clear.asm							; CLEAR
(2)    1/    9207 :                     ; ****************************************************************************************************************
(2)    2/    9207 :                     ; ****************************************************************************************************************
(2)    3/    9207 :                     ;
(2)    4/    9207 :                     ;													CLEAR
(2)    5/    9207 :                     ;	
(2)    6/    9207 :                     ; ****************************************************************************************************************
(2)    7/    9207 :                     ; ****************************************************************************************************************
(2)    8/    9207 :                     
(2)    9/    9207 : 90 13               	jmp	CCL_Over
(2)   10/    9209 :                     
(2)   11/    9209 :                     ; ****************************************************************************************************************
(2)   12/    9209 :                     ;												CLEAR command
 AS V1.42 Beta [Bld 102] - source file minol.asm(clear.asm) - page 12 - 1/18/2016 18:16:22


(2)   13/    9209 :                     ; ****************************************************************************************************************
(2)   14/    9209 :                     
(2)   15/    9209 :                     CMD_Clear:
(2)   16/    9209 : (MACRO)             	lpi 	p3,Variables 										; point P3 to variables
(2)   16/    9209 : C4 0C                       ldi     (VARIABLES) / 256
(2)   16/    920B : 37                          xpah    P3
(2)   16/    920C : C4 90                       ldi     (VARIABLES) & 255
(2)   16/    920E : 33                          xpal    P3
(2)   17/    920F : C4 1A               	ldi 	26 													; loop counter to 26
(2)   18/    9211 : CA FF               	st 		-1(p2)
(2)   19/    9213 :                     CCL_Loop:
(2)   20/    9213 : C4 00               	ldi 	0x00												; clear a variable
(2)   21/    9215 : CF 01               	st 		@1(p3)
(2)   22/    9217 : BA FF               	dld 	-1(p2) 												; done all
(2)   23/    9219 : 9C F8               	jnz 	CCL_Loop											; loop back
(2)   24/    921B : 03                  	scl 														; no error
(2)   25/    921C :                     
(2)   26/    921C :                     CCL_Over:
(1)   18/    921C :                     	include source\commands\print.asm 							; PR<int>
(2)    1/    921C :                     ; ****************************************************************************************************************
(2)    2/    921C :                     ; ****************************************************************************************************************
(2)    3/    921C :                     ;
(2)    4/    921C :                     ;												PR command
(2)    5/    921C :                     ;	
(2)    6/    921C :                     ; ****************************************************************************************************************
(2)    7/    921C :                     ; ****************************************************************************************************************
(2)    8/    921C :                     
(2)    9/    921C : 90 51               	jmp 	CPR_Over2
(2)   10/    921E :                     
(2)   11/    921E :                     ; ****************************************************************************************************************
(2)   12/    921E :                     ;												Main printing loop
(2)   13/    921E :                     ; ****************************************************************************************************************
(2)   14/    921E :                     
(2)   15/    921E :                     CMD_Print:
(2)   16/    921E : C4 08               	ldi 	0x8 												; read keyboard
(2)   17/    9220 : 37                  	xpah 	p3
(2)   18/    9221 : C3 00               	ld 		(p3) 
(2)   19/    9223 : E4 83               	xri 	0x80+3
(2)   20/    9225 : 98 44               	jz		CPR_Break
(2)   21/    9227 :                     
(2)   22/    9227 : (MACRO)             	lpi 	p3,Print-1 											; set up P3 for printing.
(2)   22/    9227 : C4 00                       ldi     (PRINT-1) / 256
(2)   22/    9229 : 37                          xpah    P3
(2)   22/    922A : C4 02                       ldi     (PRINT-1) & 255
(2)   22/    922C : 33                          xpal    P3
(2)   23/    922D : C1 00               	ld 		(p1)												; reached end of command, print RETURN and exit.
(2)   24/    922F : 98 7F               	jz 		CPR_EndReturn
(2)   25/    9231 : E4 3A               	xri 	':'
(2)   26/    9233 : 98 7B               	jz 		CPR_EndReturn
(2)   27/    9235 : C5 01               	ld 		@1(p1)												; re-read with a bump
(2)   28/    9237 : E4 20               	xri 	' '													; if space, skip it
(2)   29/    9239 : 98 E3               	jz 		CMD_Print
(2)   30/    923B : E4 0C               	xri 	','!' '												; if comma, skip it.
(2)   31/    923D : 98 DF               	jz 		CMD_Print
(2)   32/    923F : E4 17               	xri 	';'!','												; if semicolon exit without a return
(2)   33/    9241 : 98 70               	jz 		CPR_EndOk 
(2)   34/    9243 : E4 19               	xri 	'"'!';'												; if quote mark print as quoted string
(2)   35/    9245 : 98 2A               	jz 		CPR_QuotedString
(2)   36/    9247 : E4 06               	xri 	'$'!'"'												; if $ print string at address.
(2)   37/    9249 : 98 33               	jz 		CPR_StringAtAddress
 AS V1.42 Beta [Bld 102] - source file minol.asm(print.asm) - page 13 - 1/18/2016 18:16:22


(2)   38/    924B :                     
(2)   39/    924B :                     ; ****************************************************************************************************************
(2)   40/    924B :                     ;												numerical expression
(2)   41/    924B :                     ; ****************************************************************************************************************
(2)   42/    924B :                     
(2)   43/    924B : C4 20               	ldi 	' '													; preceding space
(2)   44/    924D : 3F                  	xppc 	p3
(2)   45/    924E : C5 FF               	ld 		@-1(p1)												; unpick the get, first character of expression.
(2)   46/    9250 : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; evaluate expression
(2)   46/    9250 : C4 94                       ldi     (EVALUATEEXPRESSION-1) / 256
(2)   46/    9252 : 37                          xpah    P3
(2)   46/    9253 : C4 2B                       ldi     (EVALUATEEXPRESSION-1) & 255
(2)   46/    9255 : 33                          xpal    P3
(2)   47/    9256 : 3F                  	xppc 	p3
(2)   48/    9257 : 94 5B               	jp 		CPR_Over 											; exit on error.
(2)   49/    9259 : (MACRO)             	lpi 	p3,PrintInteger-1 									; and print it
(2)   49/    9259 : C4 90                       ldi     (PRINTINTEGER-1) / 256
(2)   49/    925B : 37                          xpah    P3
(2)   49/    925C : C4 6B                       ldi     (PRINTINTEGER-1) & 255
(2)   49/    925E : 33                          xpal    P3
(2)   50/    925F : 3F                  	xppc 	p3
(2)   51/    9260 : (MACRO)             	lpi 	p3,Print-1
(2)   51/    9260 : C4 00                       ldi     (PRINT-1) / 256
(2)   51/    9262 : 37                          xpah    P3
(2)   51/    9263 : C4 02                       ldi     (PRINT-1) & 255
(2)   51/    9265 : 33                          xpal    P3
(2)   52/    9266 : C4 20               	ldi 	' '													; trailing space
(2)   53/    9268 : 3F                  	xppc 	p3
(2)   54/    9269 :                     CMD_Print2:
(2)   55/    9269 : 90 B3               	jmp 	CMD_Print
(2)   56/    926B :                     
(2)   57/    926B :                     ; ****************************************************************************************************************
(2)   58/    926B :                     ;													Break 
(2)   59/    926B :                     ; ****************************************************************************************************************
(2)   60/    926B :                     
(2)   61/    926B :                     CPR_Break:
(2)   62/    926B : C4 38               	ldi 	ERRC_BREAK
(2)   63/    926D : 01                  	xae
(2)   64/    926E : 02                  	ccl
(2)   65/    926F :                     CPR_Over2:
(2)   66/    926F : 90 43               	jmp 	CPR_Over
(2)   67/    9271 :                     
(2)   68/    9271 :                     ; ****************************************************************************************************************
(2)   69/    9271 :                     ;												"<quoted string>"
(2)   70/    9271 :                     ; ****************************************************************************************************************
(2)   71/    9271 :                     
(2)   72/    9271 :                     CPR_QuotedString:
(2)   73/    9271 : C5 01               	ld 		@1(p1) 												; get character
(2)   74/    9273 : 98 35               	jz 		CPR_Syntax 											; if NULL, syntax error.
(2)   75/    9275 : E4 22               	xri 	'"'													; if closing quote
(2)   76/    9277 : 98 A5               	jz 		CMD_Print
(2)   77/    9279 : C1 FF               	ld 		-1(p1)												; re-get it
(2)   78/    927B : 3F                  	xppc 	p3 													; print it
(2)   79/    927C : 90 F3               	jmp 	CPR_QuotedString
(2)   80/    927E :                     
(2)   81/    927E :                     ; ****************************************************************************************************************
(2)   82/    927E :                     ;									$(H,L) print string at address, ended by -ve or 0.
(2)   83/    927E :                     ; ****************************************************************************************************************
(2)   84/    927E :                     
(2)   85/    927E :                     CPR_StringAtAddress:
 AS V1.42 Beta [Bld 102] - source file minol.asm(print.asm) - page 14 - 1/18/2016 18:16:22


(2)   86/    927E : (MACRO)             	lpi 	p3,EvaluateAddressPair-1 							; evaluate (H,L)
(2)   86/    927E : C4 95                       ldi     (EVALUATEADDRESSPAIR-1) / 256
(2)   86/    9280 : 37                          xpah    P3
(2)   86/    9281 : C4 7E                       ldi     (EVALUATEADDRESSPAIR-1) & 255
(2)   86/    9283 : 33                          xpal    P3
(2)   87/    9284 : 3F                  	xppc 	p3	
(2)   88/    9285 : 94 2D               	jp 		CPR_Over											; exit on error
(2)   89/    9287 :                     
(2)   90/    9287 : C6 FF               	ld 		@-1(p2) 											; retrieve H to P1.H
(2)   91/    9289 : 35                  	xpah 	p1
(2)   92/    928A : CA 00               	st 		(p2)												; and save P1.H there
(2)   93/    928C : C6 FF               	ld 		@-1(p2) 											; retrieve L to P1.L
(2)   94/    928E : 31                  	xpal 	p1
(2)   95/    928F : CA 00               	st 		(p2)
(2)   96/    9291 : (MACRO)             	lpi 	p3,Print-1 											; set up P3 to print.
(2)   96/    9291 : C4 00                       ldi     (PRINT-1) / 256
(2)   96/    9293 : 37                          xpah    P3
(2)   96/    9294 : C4 02                       ldi     (PRINT-1) & 255
(2)   96/    9296 : 33                          xpal    P3
(2)   97/    9297 :                     CPR_StringLoop:
(2)   98/    9297 : C5 01               	ld 		@1(p1) 												; fetch and bump character
(2)   99/    9299 : 98 02               	jz 		CPR_StringExit 										; if zero end of string
(2)  100/    929B : 94 08               	jp 		CPR_StringPrint 									; if +ve printable character
(2)  101/    929D :                     ;
(2)  102/    929D :                     CPR_StringExit:
(2)  103/    929D : C6 01               	ld 		@1(p2)												; restore P1.
(2)  104/    929F : 31                  	xpal 	p1
(2)  105/    92A0 : C6 01               	ld 		@1(p2)
(2)  106/    92A2 : 35                  	xpah 	p1
(2)  107/    92A3 : 90 C4               	jmp 	CMD_Print2 											; and print the next thing.
(2)  108/    92A5 :                     ;
(2)  109/    92A5 :                     CPR_StringPrint:
(2)  110/    92A5 : C1 FF               	ld 		-1(p1) 												; retrieve, print and loop
(2)  111/    92A7 : 3F                  	xppc 	p3
(2)  112/    92A8 : 90 ED               	jmp 	CPR_StringLoop
(2)  113/    92AA :                     
(2)  114/    92AA :                     ; ****************************************************************************************************************
(2)  115/    92AA :                     ;												Syntax Error
(2)  116/    92AA :                     ; ****************************************************************************************************************
(2)  117/    92AA :                     
(2)  118/    92AA :                     CPR_Syntax:
(2)  119/    92AA : C4 35               	ldi 	ERRC_Syntax 										; set up for syntax error and exit
(2)  120/    92AC : 01                  	xae
(2)  121/    92AD : 02                  	ccl
(2)  122/    92AE : 90 04               	jmp 	CPR_Over
(2)  123/    92B0 :                     
(2)  124/    92B0 :                     ; ****************************************************************************************************************
(2)  125/    92B0 :                     ;										Print return and end okay.
(2)  126/    92B0 :                     ; ****************************************************************************************************************
(2)  127/    92B0 :                     
(2)  128/    92B0 :                     CPR_EndReturn:
(2)  129/    92B0 : C4 0D               	ldi 	13													; print a carriage return.
(2)  130/    92B2 : 3F                  	xppc 	p3
(2)  131/    92B3 :                     CPR_EndOk:														; end successfully.
(2)  132/    92B3 : 03                  	scl 														; set carry flag (no error)
(2)  133/    92B4 :                     
(2)  134/    92B4 :                     CPR_Over:
(2)  135/    92B4 :                     	
(1)   19/    92B4 :                     	include source\commands\call.asm 							; CALL
(2)    1/    92B4 :                     ; ****************************************************************************************************************
 AS V1.42 Beta [Bld 102] - source file minol.asm(call.asm) - page 15 - 1/18/2016 18:16:22


(2)    2/    92B4 :                     ; ****************************************************************************************************************
(2)    3/    92B4 :                     ;
(2)    4/    92B4 :                     ;												CALL command
(2)    5/    92B4 :                     ;	
(2)    6/    92B4 :                     ; ****************************************************************************************************************
(2)    7/    92B4 :                     ; ****************************************************************************************************************
(2)    8/    92B4 :                     
(2)    9/    92B4 : 90 27               	jmp		CCA_Over
(2)   10/    92B6 :                     
(2)   11/    92B6 :                     CMD_Call:
(2)   12/    92B6 : (MACRO)             	lpi 	p3,EvaluateAddressPair-1 							; evaluate the address pair (e.g. (H,L))
(2)   12/    92B6 : C4 95                       ldi     (EVALUATEADDRESSPAIR-1) / 256
(2)   12/    92B8 : 37                          xpah    P3
(2)   12/    92B9 : C4 7E                       ldi     (EVALUATEADDRESSPAIR-1) & 255
(2)   12/    92BB : 33                          xpal    P3
(2)   13/    92BC : 3F                  	xppc 	p3
(2)   14/    92BD : 94 1E               	jp 		CCA_Over 											; exit on error.
(2)   15/    92BF : C2 FE               	ld 		-2(p2) 												; retrieve the L value to E
(2)   16/    92C1 : 01                  	xae 	
(2)   17/    92C2 : C2 FF               	ld 		-1(p2)												; retrieve the H value to P3.H
(2)   18/    92C4 : 37                  	xpah 	p3
(2)   19/    92C5 : 40                  	lde	 														; copy L value to P3.L
(2)   20/    92C6 : 33                  	xpal 	p3
(2)   21/    92C7 : C7 FF               	ld 		@-1(p3) 											; fix up for pre-increment
(2)   22/    92C9 : (MACRO)             	pushp 	p1 													; save P1
(2)   22/    92C9 : 35                          xpah    P1
(2)   22/    92CA : CE FF                       st              @-1(p2)
(2)   22/    92CC : 31                          xpal    P1
(2)   22/    92CD : CE FF                       st              @-1(p2)
(2)   23/    92CF : (MACRO)             	lpi 	p1,Variables 										; and point P1 to the variables
(2)   23/    92CF : C4 0C                       ldi     (VARIABLES) / 256
(2)   23/    92D1 : 35                          xpah    P1
(2)   23/    92D2 : C4 90                       ldi     (VARIABLES) & 255
(2)   23/    92D4 : 31                          xpal    P1
(2)   24/    92D5 : 03                  	scl 														; set CY/L flag, so the call can return an error.
(2)   25/    92D6 : 3F                  	xppc 	p3 													; call the routine
(2)   26/    92D7 : (MACRO)             	pullp	p1 													; restore P1
(2)   26/    92D7 : C6 01                       ld              @1(p2)
(2)   26/    92D9 : 31                          xpal    P1
(2)   26/    92DA : C6 01                       ld              @1(p2)
(2)   26/    92DC : 35                          xpah    P1
(2)   27/    92DD :                     	
(2)   28/    92DD :                     CCA_Over:
(1)   20/    92DD :                     	include source\commands\let.asm 							; LET (optional, but slower if not present)
(2)    1/    92DD :                     ; ****************************************************************************************************************
(2)    2/    92DD :                     ; ****************************************************************************************************************
(2)    3/    92DD :                     ;
(2)    4/    92DD :                     ;												LET command
(2)    5/    92DD :                     ;	
(2)    6/    92DD :                     ; ****************************************************************************************************************
(2)    7/    92DD :                     ; ****************************************************************************************************************
(2)    8/    92DD :                     
(2)    9/    92DD : 90 51               	jmp 	CLE_Over
(2)   10/    92DF :                     
(2)   11/    92DF :                     CMD_Let:
(2)   12/    92DF : C1 00               	ld 		(p1) 												; look at character
(2)   13/    92E1 : E4 28               	xri 	'('													; is it let (h,l) ?
(2)   14/    92E3 : 98 20               	jz 		CLE_IsHL 											; if so, go to the (H,L) code
(2)   15/    92E5 : C1 00               	ld 		(p1) 												; re-read it.
(2)   16/    92E7 : 02                  	ccl
 AS V1.42 Beta [Bld 102] - source file minol.asm(let.asm) - page 16 - 1/18/2016 18:16:22


(2)   17/    92E8 : F4 A5               	adi 	255-'Z' 											; will be +ve on error
(2)   18/    92EA : 94 04               	jp 		CLE_Syntax 											; e.g. > Z
(2)   19/    92EC : F4 1A               	adi 	26 													; will be 0-25 if A..Z
(2)   20/    92EE : 94 06               	jp 		CLE_SingleVariable
(2)   21/    92F0 :                     ;
(2)   22/    92F0 :                     ;	Syntax Error
(2)   23/    92F0 :                     ;
(2)   24/    92F0 :                     CLE_Syntax:
(2)   25/    92F0 : C4 35               	ldi 	ERRC_Syntax 										; set E to error code.
(2)   26/    92F2 : 01                  	xae
(2)   27/    92F3 : 02                  	ccl 														; CY/L = 0 = Error
(2)   28/    92F4 : 90 3A               	jmp 	CLE_Over 											; and exit
(2)   29/    92F6 :                     ;
(2)   30/    92F6 :                     ;	A-Z. AC contains 0-25
(2)   31/    92F6 :                     ;
(2)   32/    92F6 :                     CLE_SingleVariable:
(2)   33/    92F6 : 02                  	ccl  														; work out variable address, and put on stack.
(2)   34/    92F7 : F4 90               	adi 	Variables & 255
(2)   35/    92F9 : CE FE               	st 		@-2(p2) 
(2)   36/    92FB : C4 0C               	ldi 	Variables / 256
(2)   37/    92FD : F4 00               	adi 	0
(2)   38/    92FF : CA 01               	st 		1(p2)
(2)   39/    9301 : C5 01               	ld 		@1(p1) 												; skip over the variable.
(2)   40/    9303 : 90 0B               	jmp 	CLE_EvaluateAndWrite
(2)   41/    9305 :                     ;
(2)   42/    9305 :                     ;	LET is (H,L) = <expr>
(2)   43/    9305 :                     ;
(2)   44/    9305 :                     CLE_IsHL:
(2)   45/    9305 : (MACRO)             	lpi 	p3,EvaluateAddressPair-1 							; evaluate the (H,L)
(2)   45/    9305 : C4 95                       ldi     (EVALUATEADDRESSPAIR-1) / 256
(2)   45/    9307 : 37                          xpah    P3
(2)   45/    9308 : C4 7E                       ldi     (EVALUATEADDRESSPAIR-1) & 255
(2)   45/    930A : 33                          xpal    P3
(2)   46/    930B : 3F                  	xppc 	p3
(2)   47/    930C : 94 22               	jp 		CLE_Over 											; exit on error
(2)   48/    930E : C6 FE               	ld 		@-2(p2) 											; the address to write to is now on TOS.
(2)   49/    9310 :                     ;
(2)   50/    9310 :                     ;	Evaluate and write.
(2)   51/    9310 :                     ;
(2)   52/    9310 :                     CLE_EvaluateAndWrite:
(2)   53/    9310 : C5 01               	ld 		@1(p1) 												; skip over spaces
(2)   54/    9312 : E4 20               	xri 	' '
(2)   55/    9314 : 98 FA               	jz 		CLE_EvaluateAndWrite
(2)   56/    9316 : E4 1D               	xri 	' '!'='												; check first non space character is =
(2)   57/    9318 : 9C D6               	jnz 	CLE_Syntax 											; if not, a syntax error.
(2)   58/    931A :                     
(2)   59/    931A : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; set up to evaluate the RHS
(2)   59/    931A : C4 94                       ldi     (EVALUATEEXPRESSION-1) / 256
(2)   59/    931C : 37                          xpah    P3
(2)   59/    931D : C4 2B                       ldi     (EVALUATEEXPRESSION-1) & 255
(2)   59/    931F : 33                          xpal    P3
(2)   60/    9320 : 3F                  	xppc 	p3													; do it
(2)   61/    9321 : C6 02               	ld 		@2(p2) 												; remove target from TOS but leave data there
(2)   62/    9323 : 06                  	csa 														; did that evaluate cause an error ?
(2)   63/    9324 : 94 0A               	jp 		CLE_Over 											; if so, exit with that error.
(2)   64/    9326 :                     
(2)   65/    9326 : C2 FE               	ld 		-2(p2) 												; load address into P3
(2)   66/    9328 : 33                  	xpal 	p3
(2)   67/    9329 : C2 FF               	ld 		-1(p2)
(2)   68/    932B : 37                  	xpah 	p3
 AS V1.42 Beta [Bld 102] - source file minol.asm(let.asm) - page 17 - 1/18/2016 18:16:22


(2)   69/    932C : 40                  	lde 														; get value
(2)   70/    932D : CB 00               	st 		(p3) 												; store there
(2)   71/    932F : 03                  	scl 														; no error and exit.
(2)   72/    9330 :                     
(2)   73/    9330 :                     CLE_Over:
(1)   21/    9330 :                     	include source\commands\if.asm								; IF
(2)    1/    9330 :                     ; ****************************************************************************************************************
(2)    2/    9330 :                     ; ****************************************************************************************************************
(2)    3/    9330 :                     ;
(2)    4/    9330 :                     ;												IF command
(2)    5/    9330 :                     ;	
(2)    6/    9330 :                     ; ****************************************************************************************************************
(2)    7/    9330 :                     ; ****************************************************************************************************************
(2)    8/    9330 :                     
(2)    9/    9330 : 90 4D               	jmp		CIF_Over
(2)   10/    9332 :                     
(2)   11/    9332 :                     CMD_If:
(2)   12/    9332 : 3F                  	xppc 	p3 													; calculate LHS of expr.
(2)   13/    9333 : 94 4A               	jp 		CIF_Over											; exit on error.
(2)   14/    9335 : C1 00               	ld 		(p1)												; get the relative operator.
(2)   15/    9337 : E4 3D               	xri 	'='													; check it is =, < or #
(2)   16/    9339 : 98 0E               	jz 		CIF_Continue
(2)   17/    933B : E4 1E               	xri 	'='!'#'
(2)   18/    933D : 98 0A               	jz 		CIF_Continue
(2)   19/    933F : E4 1F               	xri 	'#'!'<'
(2)   20/    9341 : 98 06               	jz 		CIF_Continue
(2)   21/    9343 :                     ;
(2)   22/    9343 :                     ;	Syntax error - bad relative operation.
(2)   23/    9343 :                     ;
(2)   24/    9343 :                     CIF_Syntax:
(2)   25/    9343 : C4 35               	ldi	 	ERRC_Syntax											; report syntax error
(2)   26/    9345 : 01                  	xae
(2)   27/    9346 : 02                  	ccl
(2)   28/    9347 : 90 36               	jmp 	CIF_Over
(2)   29/    9349 :                     ;
(2)   30/    9349 :                     ;	Continue IF - have LHS in E.
(2)   31/    9349 :                     ;
(2)   32/    9349 :                     CIF_Continue:
(2)   33/    9349 : C5 01               	ld 		@1(p1) 												; reget operator, and save on stack
(2)   34/    934B : CE FF               	st 		@-1(p2)
(2)   35/    934D : 40                  	lde 														; save LHS on stack.
(2)   36/    934E : CE FF               	st 		@-1(p2)
(2)   37/    9350 : 3F                  	xppc 	p3 													; evaluate the RHS of the expression
(2)   38/    9351 : C6 02               	ld 		@2(p2) 												; drop operator and LHS but the values still there.
(2)   39/    9353 : 06                  	csa 														; check for RHS error
(2)   40/    9354 : 94 29               	jp 		CIF_Over 											; and exit on error
(2)   41/    9356 : C2 FF               	ld 		-1(p2) 												; get operator
(2)   42/    9358 : E4 3C               	xri 	'<'
(2)   43/    935A : 9C 09               	jnz 	CIF_Equality 										; if not less than it's an equality test e.g. # or =
(2)   44/    935C :                     
(2)   45/    935C :                     ; ****************************************************************************************************************
(2)   46/    935C :                     ;												Less than test.
(2)   47/    935C :                     ; ****************************************************************************************************************
(2)   48/    935C :                     
(2)   49/    935C : C2 FE               	ld 		-2(p2) 												; get LHS
(2)   50/    935E : 03                  	scl
(2)   51/    935F : 78                  	cae 														; subtract RHS.
(2)   52/    9360 : 06                  	csa 														; get CY/L flag
(2)   53/    9361 : D4 80               	ani 	0x80 												; now it is AC = 0 if < true.
(2)   54/    9363 : 90 0D               	jmp 	CIF_TestIfZero
 AS V1.42 Beta [Bld 102] - source file minol.asm(if.asm) - page 18 - 1/18/2016 18:16:22


(2)   55/    9365 :                     
(2)   56/    9365 :                     ; ****************************************************************************************************************
(2)   57/    9365 :                     ;											Equal/Not Equal Test.
(2)   58/    9365 :                     ; ****************************************************************************************************************
(2)   59/    9365 :                     	
(2)   60/    9365 :                     CIF_Equality:
(2)   61/    9365 : C2 FE               	ld 		-2(p2) 												; get LHS
(2)   62/    9367 : 60                  	xre 														; compare to RHS. AC = 0 if *equal*
(2)   63/    9368 : 98 02               	jz 		CIF_Equality2
(2)   64/    936A : C4 02               	ldi 	2 													; AC = 0 if *equal* 2 if *different*
(2)   65/    936C :                     CIF_Equality2:
(2)   66/    936C : 01                  	xae 														; save in E
(2)   67/    936D : C2 FF               	ld 		-1(p2) 												; get operator.
(2)   68/    936F : D4 02               	ani 	2 													; is now 0 if '=' ($3D) 2 if '#' ($23)
(2)   69/    9371 : 60                  	xre 														; XOR with the result. Now 0 if passes test.
(2)   70/    9372 :                     
(2)   71/    9372 :                     ; ****************************************************************************************************************
(2)   72/    9372 :                     ;							Pass Test (e.g. execute statement following ;) if AC = 0
(2)   73/    9372 :                     ; ****************************************************************************************************************
(2)   74/    9372 :                     
(2)   75/    9372 :                     CIF_TestIfZero:
(2)   76/    9372 : 03                  	scl 														; set CY/L = No Error.
(2)   77/    9373 : 9C 0A               	jnz 	CIF_Over 											; if non-zero then do next command as normal.
(2)   78/    9375 :                     	
(2)   79/    9375 : C1 00               	ld 		(p1) 												; get next character
(2)   80/    9377 : E4 3B               	xri 	';'													; should be a semicolon
(2)   81/    9379 : 9C C8               	jnz 	CIF_Syntax 											; if not error
(2)   82/    937B : C5 01               	ld 		@1(p1) 												; step over it.
(2)   83/    937D : 90 59               	jmp 	ExecuteFromAddressDirect 							; and run from here.
(2)   84/    937F :                     
(2)   85/    937F :                     CIF_Over:
(2)   86/    937F :                     
(2)   87/    937F :                     
(1)   22/    937F :                     	include source\commands\goto_run.asm						; GOTO and RUN (has to be last, probably !)
(2)    1/    937F :                     ; ****************************************************************************************************************
(2)    2/    937F :                     ; ****************************************************************************************************************
(2)    3/    937F :                     ;
(2)    4/    937F :                     ;												GOTO and RUN
(2)    5/    937F :                     ;	
(2)    6/    937F :                     ; ****************************************************************************************************************
(2)    7/    937F :                     ; ****************************************************************************************************************
(2)    8/    937F :                     
(2)    9/    937F : 90 29               	jmp 	CRG_Over											; Skip over this command.
(2)   10/    9381 :                     
(2)   11/    9381 :                     ; ****************************************************************************************************************
(2)   12/    9381 :                     ;												GOTO command
(2)   13/    9381 :                     ; ****************************************************************************************************************
(2)   14/    9381 :                     
(2)   15/    9381 :                     CMD_Goto:	
(2)   16/    9381 : 3F                  	xppc 	p3 													; evaluate the line number to GOTO, in E
(2)   17/    9382 : 94 26               	jp 		CRG_Over 											; exit if error occurred
(2)   18/    9384 : 40                  	lde 														; get line number
(2)   19/    9385 : CA FF               	st 		-1(p2) 												; save below TOS.
(2)   20/    9387 : (MACRO)             	lpi 	p1,ProgramBase 										; point P1 to program Base.
(2)   20/    9387 : C4 10                       ldi     (PROGRAMBASE) / 256
(2)   20/    9389 : 35                          xpah    P1
(2)   20/    938A : C4 04                       ldi     (PROGRAMBASE) & 255
(2)   20/    938C : 31                          xpal    P1
(2)   21/    938D :                     CRG_Find:
(2)   22/    938D : C1 00               	ld 		0(p1) 												; look at offset
 AS V1.42 Beta [Bld 102] - source file minol.asm(goto_run.asm) - page 19 - 1/18/2016 18:16:22


(2)   23/    938F : 94 06               	jp 		CRG_NotEnd											; if -ve then end of program.
(2)   24/    9391 : C4 31               	ldi 	ERRC_Label 											; return label error
(2)   25/    9393 : 01                  	xae
(2)   26/    9394 : 02                  	ccl 														; set error flag
(2)   27/    9395 : 90 13               	jmp 	CRG_Over
(2)   28/    9397 :                     ;
(2)   29/    9397 :                     CRG_NotEnd:
(2)   30/    9397 : 01                  	xae 														; offset in E
(2)   31/    9398 : C1 01               	ld 		1(p1) 												; get line number
(2)   32/    939A : E2 FF               	xor 	-1(p2) 												; go back if not required one.
(2)   33/    939C : 98 0A               	jz 		CRG_ExecuteFromP1									; if found, run from P1.
(2)   34/    939E : C5 80               	ld 		@-0x80(p1) 											; go to next line
(2)   35/    93A0 : 90 EB               	jmp 	CRG_Find 											; keep trying.
(2)   36/    93A2 :                     ;
(2)   37/    93A2 :                     ; ****************************************************************************************************************
(2)   38/    93A2 :                     ;												RUN command
(2)   39/    93A2 :                     ; ****************************************************************************************************************
(2)   40/    93A2 :                     
(2)   41/    93A2 :                     CMD_Run:	
(2)   42/    93A2 : (MACRO)             	lpi 	p1,ProgramBase 										; start from first line of program
(2)   42/    93A2 : C4 10                       ldi     (PROGRAMBASE) / 256
(2)   42/    93A4 : 35                          xpah    P1
(2)   42/    93A5 : C4 04                       ldi     (PROGRAMBASE) & 255
(2)   42/    93A7 : 31                          xpal    P1
(2)   43/    93A8 :                     CRG_ExecuteFromP1:
(2)   44/    93A8 : 90 0D               	jmp 	CheckLastCommandThenExecute 						; check if the last command and if not execute.
(2)   45/    93AA :                     
(2)   46/    93AA :                     CRG_Over:
(2)   47/    93AA :                     
(1)   23/    93AA :                     
(1)   24/    93AA :                     ; ****************************************************************************************************************
(1)   25/    93AA :                     ;								Command execution complete, check for error
(1)   26/    93AA :                     ; ****************************************************************************************************************
(1)   27/    93AA :                     
(1)   28/    93AA :                     EndOfCommandExecution:
(1)   29/    93AA : 06                  	csa 														; check CY/L error flag
(1)   30/    93AB : 94 12               	jp 		GotoCommandLine 									; if CY/L = 0 error so go to command line.
(1)   31/    93AD :                     
(1)   32/    93AD :                     ; ****************************************************************************************************************
(1)   33/    93AD :                     ;	Come here to execute the instruction P1 points to, after having executed, e.g. skips forward to : or NULL
(1)   34/    93AD :                     ; ****************************************************************************************************************
(1)   35/    93AD :                     
(1)   36/    93AD :                     ExecuteNextInstruction:
(1)   37/    93AD : C5 01               	ld 		@1(p1) 												; get next and skip
(1)   38/    93AF : 98 06               	jz 		CheckLastCommandThenExecute							; if NULL, check if running mode and continue if so.
(1)   39/    93B1 : E4 3A               	xri 	':'
(1)   40/    93B3 : 9C F8               	jnz 	ExecuteNextInstruction 								; keep going until colon read.
(1)   41/    93B5 : 90 21               	jmp 	ExecuteFromAddressDirect 							; run code from the address given.
(1)   42/    93B7 :                     ;
(1)   43/    93B7 :                     ;	Test to see if the line is not the last one (e.g. offset is +ve) and if so, execute its code.
(1)   44/    93B7 :                     ;
(1)   45/    93B7 :                     CheckLastCommandThenExecute:
(1)   46/    93B7 : C1 00               	ld 		(p1) 												; look at the offset to next.
(1)   47/    93B9 : 94 11               	jp 		ExecuteFromCommandStart 							; if +ve value, execute the line here.
(1)   48/    93BB :                     ;
(1)   49/    93BB :                     ;	Have reached the end of the program. The buffer with typed commands has $FF on the end to 'fake' this.
(1)   50/    93BB :                     ; 	e.g. when it reaches the end of that command it thinks it's dropped off the top of the program
(1)   51/    93BB :                     ;
(1)   52/    93BB : 03                  	scl 														; there is no error.
(1)   53/    93BC : C4 FF               	ldi 	ERRC_End 											; set the error code to "End"
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 20 - 1/18/2016 18:16:22


(1)   54/    93BE : 01                  	xae
(1)   55/    93BF :                     GotoCommandLine: 												; return to Command Line with CY/L = error and E = code
(1)   56/    93BF : (MACRO)             	lpi 	p3,ConsoleStart-1
(1)   56/    93BF : C4 96                       ldi     (CONSOLESTART-1) / 256
(1)   56/    93C1 : 37                          xpah    P3
(1)   56/    93C2 : C4 BA                       ldi     (CONSOLESTART-1) & 255
(1)   56/    93C4 : 33                          xpal    P3
(1)   57/    93C5 : 3F                  	xppc 	p3
(1)   58/    93C6 :                     ;
(1)   59/    93C6 :                     ;	Syntax error comes here.
(1)   60/    93C6 :                     ;
(1)   61/    93C6 :                     SyntaxError:
(1)   62/    93C6 : C4 35               	ldi 	ERRC_Syntax
(1)   63/    93C8 : 01                  	xae
(1)   64/    93C9 : 02                  	ccl
(1)   65/    93CA : 90 F3               	jmp 	GotoCommandLine
(1)   66/    93CC :                     
(1)   67/    93CC :                     ; ****************************************************************************************************************
(1)   68/    93CC :                     ;	  Execute from the instruction at P1 (preceded by offset, line number), which is known to be a valid line.
(1)   69/    93CC :                     ; ****************************************************************************************************************
(1)   70/    93CC :                     
(1)   71/    93CC :                     ExecuteFromCommandStart:
(1)   72/    93CC : (MACRO)             	lpi 	p3,CurrentLine 										; point P3 to the current line
(1)   72/    93CC : C4 0C                       ldi     (CURRENTLINE) / 256
(1)   72/    93CE : 37                          xpah    P3
(1)   72/    93CF : C4 8D                       ldi     (CURRENTLINE) & 255
(1)   72/    93D1 : 33                          xpal    P3
(1)   73/    93D2 : C1 01               	ld 		1(p1) 												; read the line number 
(1)   74/    93D4 : CB 00               	st 		(p3)												; and save it - current line # updated.
(1)   75/    93D6 : C5 02               	ld 		@2(p1) 												; skip over offset (+0) line number (+1)
(1)   76/    93D8 :                     
(1)   77/    93D8 :                     ; ****************************************************************************************************************
(1)   78/    93D8 :                     ;				Run command where the instruction is at P1 (e.g. it is an ASCIIZ string)
(1)   79/    93D8 :                     ; ****************************************************************************************************************
(1)   80/    93D8 :                     
(1)   81/    93D8 :                     ExecuteFromAddressDirect:
(1)   82/    93D8 : C5 01               	ld 		@1(p1) 												; read next character
(1)   83/    93DA : 98 DB               	jz 		CheckLastCommandThenExecute 						; if \0 then check for the next line.
(1)   84/    93DC : E4 20               	xri	 	' '
(1)   85/    93DE : 98 F8               	jz 		ExecuteFromAddressDirect 							; skip over spaces.
(1)   86/    93E0 : E4 1A               	xri 	' '!':'												
(1)   87/    93E2 : 98 F4               	jz 		ExecuteFromAddressDirect 							; skip over colons.
(1)   88/    93E4 : E4 18               	xri 	':'!'"'					
(1)   89/    93E6 : 98 C5               	jz 		ExecuteNextInstruction 								; if double quote (comment) found go to next instruction.
(1)   90/    93E8 :                     ;
(1)   91/    93E8 :                     ;	Now look the command up in the command list.
(1)   92/    93E8 :                     ;
(1)   93/    93E8 : C1 FF               	ld 		-1(p1) 												; read first character of command again
(1)   94/    93EA : 01                  	xae 														; put in E.
(1)   95/    93EB : (MACRO)             	lpi 	p3,CommandList
(1)   95/    93EB : C4 95                       ldi     (COMMANDLIST) / 256
(1)   95/    93ED : 37                          xpah    P3
(1)   95/    93EE : C4 C9                       ldi     (COMMANDLIST) & 255
(1)   95/    93F0 : 33                          xpal    P3
(1)   96/    93F1 :                     EAFD_Search:
(1)   97/    93F1 : C7 05               	ld 		@5(p3) 												; read first character and bump to next.
(1)   98/    93F3 : 98 2C               	jz 		EAFD_LETCode 										; if zero then give up.
(1)   99/    93F5 : 60                  	xre 														; same as first character ?
(1)  100/    93F6 : 9C F9               	jnz		EAFD_Search 										; no, keep looking.
(1)  101/    93F8 :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 21 - 1/18/2016 18:16:22


(1)  102/    93F8 : C3 FC               	ld 		-4(p3) 												; read 2nd character
(1)  103/    93FA : E1 00               	xor 	(p1) 												; compare against actual second character
(1)  104/    93FC : 9C F3               	jnz 	EAFD_Search
(1)  105/    93FE :                     ;
(1)  106/    93FE :                     ;	Skip over characters in the command, checking for NULL and : which would be syntax errors.
(1)  107/    93FE :                     ;
(1)  108/    93FE : C3 FD               	ld 		-3(p3) 												; number of characters to skip (one less than total as one skipped)
(1)  109/    9400 : CA FF               	st 		-1(p2) 												; temporary count.
(1)  110/    9402 :                     EAFD_Skip:
(1)  111/    9402 : C5 01               	ld 		@1(p1) 												; read a character and skip
(1)  112/    9404 : 98 C0               	jz 		SyntaxError 										; if zero, then syntax error
(1)  113/    9406 : E4 3A               	xri 	':'
(1)  114/    9408 : 98 BC               	jz 		SyntaxError 										; if colon, then syntax error.
(1)  115/    940A : BA FF               	dld 	-1(p2) 												; do it the requisite number of times.
(1)  116/    940C : 9C F4               	jnz 	EAFD_Skip
(1)  117/    940E :                     ;
(1)  118/    940E :                     ;	Skip over any subsequent spaces
(1)  119/    940E :                     ;
(1)  120/    940E :                     EAFD_SkipSpaces:
(1)  121/    940E : C5 01               	ld 		@1(p1) 												; check for spaces
(1)  122/    9410 : E4 20               	xri 	' '													; space found
(1)  123/    9412 : 98 FA               	jz 		EAFD_SkipSpaces
(1)  124/    9414 : C5 FF               	ld 		@-1(p1) 											; undo last fetch so first character of next bit.
(1)  125/    9416 :                     ;
(1)  126/    9416 :                     ;	P1 is set up so execute the handler.
(1)  127/    9416 :                     ;
(1)  128/    9416 : C3 FE               	ld 		-2(p3)												; get execute LSB
(1)  129/    9418 : 01                  	xae 														; save in E
(1)  130/    9419 : C3 FF               	ld 		-1(p3) 												; get execute MSB
(1)  131/    941B : 37                  	xpah 	p3 													; put in P3.H
(1)  132/    941C : 40                  	lde 														; copy E to P3.L
(1)  133/    941D : 33                  	xpal 	p3
(1)  134/    941E : 3F                  	xppc 	p3
(1)  135/    941F : 90 0B               	jmp 	EvaluateExpression 									; is set up to have immediate evaluate call.
(1)  136/    9421 :                     ;
(1)  137/    9421 :                     ;	Couldn't find a command, so point P1 to first character, then call the LET code.
(1)  138/    9421 :                     ;
(1)  139/    9421 :                     EAFD_LETCode:
(1)  140/    9421 : C5 FF               	ld 		@-1(p1) 											; point P1 to first character of command.
(1)  141/    9423 : (MACRO)             	lpi 	p3,CMD_Let-1 										; go execute LET with evaluate re-entrancy
(1)  141/    9423 : C4 92                       ldi     (CMD_LET-1) / 256
(1)  141/    9425 : 37                          xpah    P3
(1)  141/    9426 : C4 DE                       ldi     (CMD_LET-1) & 255
(1)  141/    9428 : 33                          xpal    P3
(1)  142/    9429 : 3F                  	xppc 	p3
(1)  143/    942A : 90 00               	jmp 	EvaluateExpression
(1)  144/    942C :                     
(1)  145/    942C :                     	include source\expression.asm 								; expression evaluator.
(2)    1/    942C :                     ; ****************************************************************************************************************
(2)    2/    942C :                     ; ****************************************************************************************************************
(2)    3/    942C :                     ;
(2)    4/    942C :                     ;												Expression Evaluation
(2)    5/    942C :                     ;
(2)    6/    942C :                     ; ****************************************************************************************************************
(2)    7/    942C :                     ; ****************************************************************************************************************
(2)    8/    942C :                     
(2)    9/    942C :                     ; ****************************************************************************************************************
(2)   10/    942C :                     ; ****************************************************************************************************************
(2)   11/    942C :                     ;
(2)   12/    942C :                     ;		Evaluate expression at P1. Return 	CY/L = 0 : Error 	E = Error Code
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 22 - 1/18/2016 18:16:22


(2)   13/    942C :                     ;											CY/L = 1 : Okay 	E = Result
(2)   14/    942C :                     ;
(2)   15/    942C :                     ;		Terms are : 	A-Z 			Variables
(2)   16/    942C :                     ;						[0-9]+			Constants
(2)   17/    942C :                     ;						! 				Random byte
(2)   18/    942C :                     ;						'?'				Character constant
(2)   19/    942C :                     ;						(<expr>,<expr>)	Read Memory location
(2)   20/    942C :                     ;
(2)   21/    942C :                     ; ****************************************************************************************************************
(2)   22/    942C :                     ; ****************************************************************************************************************
(2)   23/    942C :                     
(2)   24/    942C : =0x1                EEX_PendingOp = 1 												; offset to pending operation
(2)   25/    942C : =0x0                EEX_Value = 0 													; offset to value
(2)   26/    942C :                     
(2)   27/    942C :                     EvaluateExpression:
(2)   28/    942C : (MACRO)             	pushp 	p3 													; save P3 on stack
(2)   28/    942C : 37                          xpah    P3
(2)   28/    942D : CE FF                       st              @-1(p2)
(2)   28/    942F : 33                          xpal    P3
(2)   28/    9430 : CE FF                       st              @-1(p2)
(2)   29/    9432 : C4 2B               	ldi 	'+'													; push pending operation on stack
(2)   30/    9434 : CE FF               	st 		@-1(p2)
(2)   31/    9436 : C4 00               	ldi 	0 													; push current value on stack
(2)   32/    9438 : CE FF               	st 		@-1(p2)												; effectively this puts 0+ on the front of the expression.
(2)   33/    943A :                     
(2)   34/    943A :                     ; ****************************************************************************************************************
(2)   35/    943A :                     ;													Get Next Term
(2)   36/    943A :                     ; ****************************************************************************************************************
(2)   37/    943A :                     
(2)   38/    943A :                     EEX_Term:
(2)   39/    943A : (MACRO)             	lpi 	p3,Variables 										; point P3 to variables
(2)   39/    943A : C4 0C                       ldi     (VARIABLES) / 256
(2)   39/    943C : 37                          xpah    P3
(2)   39/    943D : C4 90                       ldi     (VARIABLES) & 255
(2)   39/    943F : 33                          xpal    P3
(2)   40/    9440 :                     EEX_NextChar:
(2)   41/    9440 : C1 00               	ld 		(p1) 												; look at character
(2)   42/    9442 : 98 4F               	jz 		EEX_TermError
(2)   43/    9444 : C5 01               	ld 		@1(p1) 												; fetch and skip over.
(2)   44/    9446 : E4 20               	xri 	' '													; is it space ?
(2)   45/    9448 : 98 F6               	jz 		EEX_NextChar
(2)   46/    944A : E4 08               	xri 	' '!'('												; is it memory access ?
(2)   47/    944C : 98 55               	jz 		EEX_MemoryAccess
(2)   48/    944E : E4 09               	xri 	'('!'!'												; is it a random value ?
(2)   49/    9450 : 9C 1B               	jnz 	EEX_NotRandom
(2)   50/    9452 :                     
(2)   51/    9452 :                     ; ****************************************************************************************************************
(2)   52/    9452 :                     ;												Term is ! (random byte)
(2)   53/    9452 :                     ; ****************************************************************************************************************
(2)   54/    9452 :                     
(2)   55/    9452 :                     EEX_Random:
(2)   56/    9452 : 02                  	ccl 	
(2)   57/    9453 : C3 FF               	ld 		RandomSeed+1-Variables(p3) 							; shift the seed right
(2)   58/    9455 : 1F                  	rrl
(2)   59/    9456 : CB FF               	st 		RandomSeed+1-Variables(p3)
(2)   60/    9458 : 01                  	xae 														; put MSB in E
(2)   61/    9459 : C3 FE               	ld 		RandomSeed-Variables(p3)
(2)   62/    945B : 1F                  	rrl
(2)   63/    945C : CB FE               	st 		RandomSeed-Variables(p3)
(2)   64/    945E : 60                  	xre 														; XOR E into LSB
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 23 - 1/18/2016 18:16:22


(2)   65/    945F : 01                  	xae
(2)   66/    9460 : 06                  	csa 														; if CY/L is zero
(2)   67/    9461 : D4 80               	ani 	0x80
(2)   68/    9463 : 9C 06               	jnz 	EEX_NoTap 
(2)   69/    9465 : C3 FF               	ld 		RandomSeed+1-Variables(p3) 							; XOR MSB with $B4
(2)   70/    9467 : E4 B4               	xri 	0xB4
(2)   71/    9469 : CB FF               	st 		RandomSeed+1-Variables(p3)
(2)   72/    946B :                     EEX_NoTap:
(2)   73/    946B : 90 64               	jmp 	EEX_HaveTerm
(2)   74/    946D :                     
(2)   75/    946D :                     EEX_NotRandom:
(2)   76/    946D : E4 06               	xri 	'!'!0x27											; is it a quote ?
(2)   77/    946F : 9C 0F               	jnz 	EEX_NotQuote
(2)   78/    9471 :                     
(2)   79/    9471 :                     ; ****************************************************************************************************************
(2)   80/    9471 :                     ;													Term is '<char>'
(2)   81/    9471 :                     ; ****************************************************************************************************************
(2)   82/    9471 :                     
(2)   83/    9471 : C1 00               	ld 		(p1) 												; get character that is quoted
(2)   84/    9473 : 98 1E               	jz 		EEX_TermError 										; if zero, error.
(2)   85/    9475 : 01                  	xae 														; save in E if okay character.
(2)   86/    9476 : C1 01               	ld 		1(p1) 												; get character after that
(2)   87/    9478 : E4 27               	xri 	0x27 												; is it a quote ?
(2)   88/    947A : 9C 17               	jnz 	EEX_TermError
(2)   89/    947C : C5 02               	ld 		@2(p1) 												; skip over character and quote
(2)   90/    947E : 90 51               	jmp 	EEX_HaveTerm 										; and execute as if a legal term
(2)   91/    9480 :                     
(2)   92/    9480 :                     ; ****************************************************************************************************************
(2)   93/    9480 :                     ;									Not 'x' or !, so test for 0-9 and A-Z
(2)   94/    9480 :                     ; ****************************************************************************************************************
(2)   95/    9480 :                     
(2)   96/    9480 :                     EEX_NotQuote:
(2)   97/    9480 : C1 FF               	ld 		-1(p1)												; get old character.
(2)   98/    9482 : 02                  	ccl
(2)   99/    9483 : F4 A5               	adi 	255-'Z'												; if >= 'Z' then error.										
(2)  100/    9485 : 94 0C               	jp 		EEX_TermError
(2)  101/    9487 : F4 1A               	adi 	26 													; will be 0..25 if A..Z
(2)  102/    9489 : 94 42               	jp 		EEX_Variable 										; so do as a variable.
(2)  103/    948B : F4 07               	adi 	'A'-1-'9'											; check if > 9
(2)  104/    948D : 94 04               	jp 		EEX_TermError
(2)  105/    948F : F4 0A               	adi 	10 													; if 0-9
(2)  106/    9491 : 94 1D               	jp 		EEX_Constant
(2)  107/    9493 :                     
(2)  108/    9493 :                     ; ****************************************************************************************************************
(2)  109/    9493 :                     ;													 Error Exit.
(2)  110/    9493 :                     ; ****************************************************************************************************************
(2)  111/    9493 :                     
(2)  112/    9493 :                     EEX_TermError:
(2)  113/    9493 : C4 34               	ldi 	ERRC_Term 											; put term error in A
(2)  114/    9495 :                     EEX_Error:
(2)  115/    9495 : 01                  	xae 														; put error code in E
(2)  116/    9496 : 02                  	ccl 														; clear CY/L indicating error
(2)  117/    9497 :                     EEX_Exit:
(2)  118/    9497 : C6 02               	ld 		@2(p2) 												; throw the pending operation and value
(2)  119/    9499 : (MACRO)             	pullp 	p3 													; restore P3
(2)  119/    9499 : C6 01                       ld              @1(p2)
(2)  119/    949B : 33                          xpal    P3
(2)  119/    949C : C6 01                       ld              @1(p2)
(2)  119/    949E : 37                          xpah    P3
(2)  120/    949F : 06                  	csa 														; put CY/L in A bit 7
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 24 - 1/18/2016 18:16:22


(2)  121/    94A0 : 3F                  	xppc 	p3 													; and exit
(2)  122/    94A1 : 90 89               	jmp 	EvaluateExpression 									; make re-entrant
(2)  123/    94A3 :                     
(2)  124/    94A3 :                     ; ****************************************************************************************************************
(2)  125/    94A3 :                     ;										Handle (<expr>,<expr>)
(2)  126/    94A3 :                     ; ****************************************************************************************************************
(2)  127/    94A3 :                     
(2)  128/    94A3 :                     EEX_MemoryAccess:
(2)  129/    94A3 : C5 FF               	ld 		@-1(p1) 											; point to the (
(2)  130/    94A5 : (MACRO)             	lpi 	p3,EvaluateAddressPair-1 							; call the evaluate/read of (h,l)
(2)  130/    94A5 : C4 95                       ldi     (EVALUATEADDRESSPAIR-1) / 256
(2)  130/    94A7 : 37                          xpah    P3
(2)  130/    94A8 : C4 7E                       ldi     (EVALUATEADDRESSPAIR-1) & 255
(2)  130/    94AA : 33                          xpal    P3
(2)  131/    94AB : 3F                  	xppc 	p3
(2)  132/    94AC : 94 E9               	jp 		EEX_Exit 											; error occurred, so exit with it.
(2)  133/    94AE : 90 21               	jmp 	EEX_HaveTerm
(2)  134/    94B0 :                     
(2)  135/    94B0 :                     ; ****************************************************************************************************************
(2)  136/    94B0 :                     ;								Handle constant, first digit value is in A
(2)  137/    94B0 :                     ; ****************************************************************************************************************
(2)  138/    94B0 :                     
(2)  139/    94B0 :                     EEX_Constant:
(2)  140/    94B0 : 01                  	xae 														; put first digit value in E
(2)  141/    94B1 :                     EEX_ConstantLoop:
(2)  142/    94B1 : C1 00               	ld 		(p1) 												; get next character.
(2)  143/    94B3 : 02                  	ccl
(2)  144/    94B4 : F4 C6               	adi 	255-'9' 											; if >= 9 term is too large.
(2)  145/    94B6 : 94 19               	jp 		EEX_HaveTerm
(2)  146/    94B8 : F4 8A               	adi 	10+128
(2)  147/    94BA : 94 15               	jp 		EEX_HaveTerm
(2)  148/    94BC : 02                  	ccl
(2)  149/    94BD : 40                  	lde 														; A = n
(2)  150/    94BE : 70                  	ade 														; A = n * 2
(2)  151/    94BF : 70                  	ade 														; A = n * 3
(2)  152/    94C0 : 70                  	ade 														; A = n * 4
(2)  153/    94C1 : 70                  	ade 														; A = n * 5
(2)  154/    94C2 : 01                  	xae 														; E = n * 5
(2)  155/    94C3 : C5 01               	ld 		@1(p1) 												; read character convert to number
(2)  156/    94C5 : D4 0F               	ani 	0x0F
(2)  157/    94C7 : 02                  	ccl
(2)  158/    94C8 : 70                  	ade 														; Add n*5 twice
(2)  159/    94C9 : 70                  	ade 
(2)  160/    94CA : 01                  	xae
(2)  161/    94CB : 90 E4               	jmp 	EEX_ConstantLoop
(2)  162/    94CD :                     
(2)  163/    94CD :                     
(2)  164/    94CD :                     ; ****************************************************************************************************************
(2)  165/    94CD :                     ;									Access variable, variable id (0-25) in A
(2)  166/    94CD :                     ; ****************************************************************************************************************
(2)  167/    94CD :                     
(2)  168/    94CD :                     EEX_Variable:
(2)  169/    94CD : 01                  	xae 														; put value 0-25 in E
(2)  170/    94CE : C3 80               	ld 		-0x80(p3) 											; load using E as index
(2)  171/    94D0 : 01                  	xae 														; put in E
(2)  172/    94D1 :                     
(2)  173/    94D1 :                     ; ****************************************************************************************************************
(2)  174/    94D1 :                     ;										Have the right term in E, process it
(2)  175/    94D1 :                     ; ****************************************************************************************************************
(2)  176/    94D1 :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 25 - 1/18/2016 18:16:22


(2)  177/    94D1 :                     EEX_HaveTerm:
(2)  178/    94D1 : C2 01               	ld 		EEX_PendingOp(p2) 									; get pending operation.
(2)  179/    94D3 : E4 2B               	xri 	'+'
(2)  180/    94D5 : 9C 06               	jnz 	EEX_NotAdd
(2)  181/    94D7 :                     
(2)  182/    94D7 :                     ; ****************************************************************************************************************
(2)  183/    94D7 :                     ;												Add Right Term to Value
(2)  184/    94D7 :                     ; ****************************************************************************************************************
(2)  185/    94D7 : 02                  	ccl
(2)  186/    94D8 : C2 00               	ld 		EEX_Value(p2)										; get value
(2)  187/    94DA : 70                  	ade 														; add right
(2)  188/    94DB : 90 08               	jmp 	EEX_SaveAndExit 									; save and exit
(2)  189/    94DD :                     
(2)  190/    94DD :                     EEX_NotAdd:
(2)  191/    94DD : E4 06               	xri 	'+'!'-'
(2)  192/    94DF : 9C 12               	jnz		EEX_NotSubtract
(2)  193/    94E1 :                     
(2)  194/    94E1 :                     ; ****************************************************************************************************************
(2)  195/    94E1 :                     ;											 Subtract Right Term from Value
(2)  196/    94E1 :                     ; ****************************************************************************************************************
(2)  197/    94E1 : 03                  	scl
(2)  198/    94E2 : C2 00               	ld 		EEX_Value(p2)										; get value
(2)  199/    94E4 : 78                  	cae 														; subtract right
(2)  200/    94E5 :                     EEX_SaveAndExit:
(2)  201/    94E5 : CA 00               	st 		EEX_Value(p2) 										; save value back
(2)  202/    94E7 : 90 30               	jmp 	EEX_CheckNextOperation 								; and exit, look for next operator.
(2)  203/    94E9 :                     
(2)  204/    94E9 :                     EEX_Divide_Zero:												; handle divide by zero error.
(2)  205/    94E9 : C4 37               	ldi 	ERRC_DivZero
(2)  206/    94EB : 90 A8               	jmp 	EEX_Error
(2)  207/    94ED :                     
(2)  208/    94ED :                     EEX_EndExpression:
(2)  209/    94ED : C2 00               	ld 		EEX_Value(p2) 										; get current value
(2)  210/    94EF : 01                  	xae 														; put in E
(2)  211/    94F0 : 03                  	scl 														; set CY/L indicating expression okay.
(2)  212/    94F1 : 90 A4               	jmp 	EEX_Exit 											; and exit.
(2)  213/    94F3 :                     
(2)  214/    94F3 :                     EEX_NotSubtract:
(2)  215/    94F3 : E4 07               	xri 	'-'!'*'
(2)  216/    94F5 : 9C 45               	jnz 	EEX_Divide
(2)  217/    94F7 :                     
(2)  218/    94F7 :                     ; ****************************************************************************************************************
(2)  219/    94F7 :                     ;											 Multiply Right Term into Value
(2)  220/    94F7 :                     ; ****************************************************************************************************************
(2)  221/    94F7 :                     
(2)  222/    94F7 : C2 00               	ld 		EEX_Value(p2) 										; a = left value
(2)  223/    94F9 : CA 01               	st 		1(p2)
(2)  224/    94FB : C4 00               	ldi 	0													; res = 0(p2)
(2)  225/    94FD : CA 00               	st 		0(p2) 												; clear it.
(2)  226/    94FF :                     EEX_MultiplyLoop:
(2)  227/    94FF : 40                  	lde  														; if B == 0 then we are done.
(2)  228/    9500 : 98 17               	jz 		EEX_CheckNextOperation
(2)  229/    9502 : D4 01               	ani 	1 													; if B LSB is non zero.
(2)  230/    9504 : 98 07               	jz 		EEX_Multiply_B0IsZero
(2)  231/    9506 : C2 00               	ld 		0(p2) 												; add A to Result
(2)  232/    9508 : 02                  	ccl
(2)  233/    9509 : F2 01               	add 	1(p2)
(2)  234/    950B : CA 00               	st 		0(p2)
(2)  235/    950D :                     EEX_Multiply_B0IsZero:
(2)  236/    950D : 40                  	lde 														; shift B right
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 26 - 1/18/2016 18:16:22


(2)  237/    950E : 1C                  	sr
(2)  238/    950F : 01                  	xae
(2)  239/    9510 : C2 01               	ld 		1(p2) 												; shift A left
(2)  240/    9512 : 02                  	ccl
(2)  241/    9513 : F2 01               	add 	1(p2)
(2)  242/    9515 : CA 01               	st 		1(p2)
(2)  243/    9517 : 90 E6               	jmp 	EEX_MultiplyLoop
(2)  244/    9519 :                     
(2)  245/    9519 :                     ; ****************************************************************************************************************
(2)  246/    9519 :                     ;											Check next operation
(2)  247/    9519 :                     ; ****************************************************************************************************************
(2)  248/    9519 :                     
(2)  249/    9519 :                     EEX_CheckNextOperation:
(2)  250/    9519 : C5 01               	ld 		@1(p1)												; skip over spaces
(2)  251/    951B : E4 20               	xri 	' '
(2)  252/    951D : 98 FA               	jz 		EEX_CheckNextOperation
(2)  253/    951F : C5 FF               	ld 		@-1(p1)												; get operator
(2)  254/    9521 : E4 2B               	xri 	'+'													; check if + - * /
(2)  255/    9523 : 98 0C               	jz 		EEX_FoundOperator
(2)  256/    9525 : E4 06               	xri 	'+'!'-'
(2)  257/    9527 : 98 08               	jz 		EEX_FoundOperator
(2)  258/    9529 : E4 07               	xri 	'-'!'*'
(2)  259/    952B : 98 04               	jz 		EEX_FoundOperator
(2)  260/    952D : E4 05               	xri 	'*'!'/'
(2)  261/    952F : 9C BC               	jnz 	EEX_EndExpression
(2)  262/    9531 :                     
(2)  263/    9531 :                     EEX_FoundOperator:
(2)  264/    9531 : C5 01               	ld  	@1(p1) 												; get and skip operator
(2)  265/    9533 : CA 01               	st 		EEX_PendingOp(p2)									; save then pending operator
(2)  266/    9535 : (MACRO)             	lpi 	p3,EEX_Term-1
(2)  266/    9535 : C4 94                       ldi     (EEX_TERM-1) / 256
(2)  266/    9537 : 37                          xpah    P3
(2)  266/    9538 : C4 39                       ldi     (EEX_TERM-1) & 255
(2)  266/    953A : 33                          xpal    P3
(2)  267/    953B : 3F                  	xppc 	p3
(2)  268/    953C :                     
(2)  269/    953C :                     ; ****************************************************************************************************************
(2)  270/    953C :                     ;											 Divide Right Term into Value
(2)  271/    953C :                     ; ****************************************************************************************************************
(2)  272/    953C :                     
(2)  273/    953C :                     EEX_Divide:
(2)  274/    953C : 40                  	lde 														; if denominator zero, error 2.
(2)  275/    953D : 98 AA               	jz 		EEX_Divide_Zero
(2)  276/    953F : C2 00               	ld 		0(p2) 												; numerator into 1(p2)
(2)  277/    9541 : CA 01               	st 		1(p2) 												; denominator is in E
(2)  278/    9543 : C4 00               	ldi 	0
(2)  279/    9545 : CA 00               	st 		0(p2)												; quotient in 0(p2)
(2)  280/    9547 : CA FF               	st 		-1(p2) 												; remainder in -1(p2)
(2)  281/    9549 : C4 80               	ldi 	0x80 									
(2)  282/    954B : CA FE               	st 		-2(p2) 												; bit in -2(p2)
(2)  283/    954D :                     
(2)  284/    954D :                     EEX_Divide_Loop:
(2)  285/    954D : C2 FE               	ld 		-2(p2) 												; exit if bit = 0,we've finished.
(2)  286/    954F : 98 C8               	jz 		EEX_CheckNextOperation
(2)  287/    9551 :                     
(2)  288/    9551 : 02                  	ccl 	 													; shift remainder left.
(2)  289/    9552 : C2 FF               	ld 		-1(p2)
(2)  290/    9554 : F2 FF               	add 	-1(p2)
(2)  291/    9556 : CA FF               	st 		-1(p2)
(2)  292/    9558 :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 27 - 1/18/2016 18:16:22


(2)  293/    9558 : C2 01               	ld 		1(p2)												; get numerator.
(2)  294/    955A : 94 02               	jp 		EEX_Divide_Numerator_Positive
(2)  295/    955C : AA FF               	ild 	-1(p2)  											; if numerator -ve, increment remainder.
(2)  296/    955E :                     EEX_Divide_Numerator_Positive:
(2)  297/    955E :                     
(2)  298/    955E : C2 FF               	ld 		-1(p2) 												; calculate remainder - denominator
(2)  299/    9560 : 03                  	scl
(2)  300/    9561 : 78                  	cae 
(2)  301/    9562 : CA FD               	st 		-3(p2) 												; save in temp -3(p2)
(2)  302/    9564 : 06                  	csa 														; if temp >= 0, CY/L is set
(2)  303/    9565 : 94 0A               	jp 		EEX_Divide_Temp_Positive
(2)  304/    9567 :                     
(2)  305/    9567 : C2 FD               	ld 		-3(p2) 												; copy temp to remainder
(2)  306/    9569 : CA FF               	st 		-1(p2)
(2)  307/    956B : C2 FE               	ld 		-2(p2) 												; or bit into quotient
(2)  308/    956D : DA 00               	or 		0(p2)
(2)  309/    956F : CA 00               	st 		0(p2)
(2)  310/    9571 :                     EEX_Divide_Temp_Positive:
(2)  311/    9571 : C2 FE               	ld 		-2(p2) 												; shift bit right
(2)  312/    9573 : 1C                  	sr
(2)  313/    9574 : CA FE               	st 		-2(p2)
(2)  314/    9576 :                     
(2)  315/    9576 : C2 01               	ld 		1(p2)												; shift numerator positive
(2)  316/    9578 : 02                  	ccl
(2)  317/    9579 : F2 01               	add 	1(p2)
(2)  318/    957B : CA 01               	st 		1(p2)
(2)  319/    957D : 90 CE               	jmp 	EEX_Divide_Loop
(2)  320/    957F :                     
(2)  321/    957F :                     ; ****************************************************************************************************************
(2)  322/    957F :                     ; ****************************************************************************************************************
(2)  323/    957F :                     ;
(2)  324/    957F :                     ;	Evaluate an address pair at P1 e.g. (<expr>,<expr>).  Returns as for expression, but stack-2, stack-1 are
(2)  325/    957F :                     ;	the address (the data at that address is in E if no error occurs). Used for reading and writing.
(2)  326/    957F :                     ;
(2)  327/    957F :                     ; ****************************************************************************************************************
(2)  328/    957F :                     ; ****************************************************************************************************************
(2)  329/    957F :                     
(2)  330/    957F :                     EvaluateAddressPair:
(2)  331/    957F : C6 FE               	ld 		@-2(p2)												; make space to store HL
(2)  332/    9581 : (MACRO)             	pushp 	p3 													; save return address.
(2)  332/    9581 : 37                          xpah    P3
(2)  332/    9582 : CE FF                       st              @-1(p2)
(2)  332/    9584 : 33                          xpal    P3
(2)  332/    9585 : CE FF                       st              @-1(p2)
(2)  333/    9587 : C1 00               	ld 		(p1) 												; check first is '(', exit with term error if not
(2)  334/    9589 : E4 28               	xri 	'('
(2)  335/    958B : 9C 2E               	jnz 	EAP_Error
(2)  336/    958D : C5 01               	ld 		@1(p1)												; skip over it.
(2)  337/    958F : (MACRO)             	lpi 	p3,EvaluateExpression-1 							; evaluate H
(2)  337/    958F : C4 94                       ldi     (EVALUATEEXPRESSION-1) / 256
(2)  337/    9591 : 37                          xpah    P3
(2)  337/    9592 : C4 2B                       ldi     (EVALUATEEXPRESSION-1) & 255
(2)  337/    9594 : 33                          xpal    P3
(2)  338/    9595 : 3F                  	xppc 	p3
(2)  339/    9596 : 94 27               	jp 		EAP_Exit 											; exit if failed
(2)  340/    9598 : 40                  	lde 														; store H at 3(P2)
(2)  341/    9599 : CA 03               	st 		3(p2)
(2)  342/    959B : C1 00               	ld 		(p1) 												; check for ','
(2)  343/    959D : E4 2C               	xri 	','
(2)  344/    959F : 9C 1A               	jnz 	EAP_Error											; fail if not present
 AS V1.42 Beta [Bld 102] - source file minol.asm(expression.asm) - page 28 - 1/18/2016 18:16:22


(2)  345/    95A1 : C5 01               	ld 		@1(p1)												; skip over comma
(2)  346/    95A3 : 3F                  	xppc 	p3 													; evaluate L
(2)  347/    95A4 : 94 19               	jp 		EAP_Exit 											; exit on error
(2)  348/    95A6 : 40                  	lde 														; store L at 2(P2)
(2)  349/    95A7 : CA 02               	st 		2(p2)
(2)  350/    95A9 : 33                  	xpal 	p3 													; and put in P3.L for later
(2)  351/    95AA : C1 00               	ld 		(p1) 												; check for ')'
(2)  352/    95AC : E4 29               	xri 	')'
(2)  353/    95AE : 9C 0B               	jnz 	EAP_Error
(2)  354/    95B0 : C5 01               	ld 		@1(p1) 												; skip over close bracket
(2)  355/    95B2 : C2 03               	ld 		3(p2) 												; put 3(P2) in P3.H
(2)  356/    95B4 : 37                  	xpah 	p3
(2)  357/    95B5 : C3 00               	ld 		(p3) 												; read address
(2)  358/    95B7 : 01                  	xae 														; put in E
(2)  359/    95B8 : 03                  	scl 														; set carry to indicate okay
(2)  360/    95B9 : 90 04               	jmp 	EAP_Exit 											; and exit.
(2)  361/    95BB :                     ;
(2)  362/    95BB :                     EAP_Error:
(2)  363/    95BB : C4 34               	ldi 	ERRC_TERM 											; set error up
(2)  364/    95BD : 01                  	xae
(2)  365/    95BE : 02                  	ccl
(2)  366/    95BF :                     ;
(2)  367/    95BF :                     EAP_Exit:														; exit
(2)  368/    95BF : (MACRO)             	pullp 	p3 													; restore P3
(2)  368/    95BF : C6 01                       ld              @1(p2)
(2)  368/    95C1 : 33                          xpal    P3
(2)  368/    95C2 : C6 01                       ld              @1(p2)
(2)  368/    95C4 : 37                          xpah    P3
(2)  369/    95C5 : C6 02               	ld 		@2(p2) 												; drop the H L address store
(2)  370/    95C7 : 06                  	csa 														; A bit 7 = CY/L
(2)  371/    95C8 : 3F                  	xppc 	p3
(2)  372/    95C9 :                     
(2)  373/    95C9 :                     
(1)  146/    95C9 :                     
(1)  147/    95C9 :                     ; ****************************************************************************************************************
(1)  148/    95C9 :                     ;		Command look up table - should be ordered by degree of usage, and OS things (e.g. LIST) at the end
(1)  149/    95C9 :                     ; ****************************************************************************************************************
(1)  150/    95C9 :                     
(1)  151/    95C9 :                     CommandList:
(1)  152/    95C9 : (MACRO)             	cmd 	'L','E',3,CMD_Let 									; LET var|(h,l) = <expr>
(1)  152/    95C9 : 4C 45                       db              'L','E'                                                                                           ; first and second characters
(1)  152/    95CB : 02                          db              (3)-1                                                                                      ; 3 -1 (first char already skipped)
(1)  152/    95CC : DE 92                       dw              (CMD_LET)-1                                                                                        ; execution point for prefetch.
(1)  153/    95CE : (MACRO)             	cmd 	'I','F',2,CMD_If 									; If [expr][=|#|<][expr]; [statement]
(1)  153/    95CE : 49 46                       db              'I','F'                                                                                           ; first and second characters
(1)  153/    95D0 : 01                          db              (2)-1                                                                                      ; 2 -1 (first char already skipped)
(1)  153/    95D1 : 31 93                       dw              (CMD_IF)-1                                                                                        ; execution point for prefetch.
(1)  154/    95D3 : (MACRO)             	cmd 	'G','O',4,CMD_Goto									; GOTO [line number]
(1)  154/    95D3 : 47 4F                       db              'G','O'                                                                                           ; first and second characters
(1)  154/    95D5 : 03                          db              (4)-1                                                                                      ; 4 -1 (first char already skipped)
(1)  154/    95D6 : 80 93                       dw              (CMD_GOTO)-1                                                                                        ; execution point for prefetch.
(1)  155/    95D8 : (MACRO)             	cmd 	'C','A',4,CMD_Call									; CALL (high,low)
(1)  155/    95D8 : 43 41                       db              'C','A'                                                                                           ; first and second characters
(1)  155/    95DA : 03                          db              (4)-1                                                                                      ; 4 -1 (first char already skipped)
(1)  155/    95DB : B5 92                       dw              (CMD_CALL)-1                                                                                        ; execution point for prefetch.
(1)  156/    95DD : (MACRO)             	cmd 	'P','R',2,CMD_Print 								; PRINT ["<text>"|<expr>|$(h,l)][,....][;]
(1)  156/    95DD : 50 52                       db              'P','R'                                                                                           ; first and second characters
(1)  156/    95DF : 01                          db              (2)-1                                                                                      ; 2 -1 (first char already skipped)
(1)  156/    95E0 : 1D 92                       dw              (CMD_PRINT)-1                                                                                        ; execution point for prefetch.
(1)  157/    95E2 : (MACRO)             	cmd 	'C','L',5,CMD_Clear									; CLEAR
 AS V1.42 Beta [Bld 102] - source file minol.asm(execute.asm) - page 29 - 1/18/2016 18:16:22


(1)  157/    95E2 : 43 4C                       db              'C','L'                                                                                           ; first and second characters
(1)  157/    95E4 : 04                          db              (5)-1                                                                                      ; 5 -1 (first char already skipped)
(1)  157/    95E5 : 08 92                       dw              (CMD_CLEAR)-1                                                                                        ; execution point for prefetch.
(1)  158/    95E7 : (MACRO)             	cmd 	'I','N',2,CMD_In 									; IN [l-expr],$(H,L)
(1)  158/    95E7 : 49 4E                       db              'I','N'                                                                                           ; first and second characters
(1)  158/    95E9 : 01                          db              (2)-1                                                                                      ; 2 -1 (first char already skipped)
(1)  158/    95EA : 68 91                       dw              (CMD_IN)-1                                                                                        ; execution point for prefetch.
(1)  159/    95EC : (MACRO)             	cmd 	'E','N',3,CMD_End 									; END
(1)  159/    95EC : 45 4E                       db              'E','N'                                                                                           ; first and second characters
(1)  159/    95EE : 02                          db              (3)-1                                                                                      ; 3 -1 (first char already skipped)
(1)  159/    95EF : 62 91                       dw              (CMD_END)-1                                                                                        ; execution point for prefetch.
(1)  160/    95F1 : (MACRO)             	cmd 	'N','E',3,CMD_New 									; NEW
(1)  160/    95F1 : 4E 45                       db              'N','E'                                                                                           ; first and second characters
(1)  160/    95F3 : 02                          db              (3)-1                                                                                      ; 3 -1 (first char already skipped)
(1)  160/    95F4 : 48 91                       dw              (CMD_NEW)-1                                                                                        ; execution point for prefetch.
(1)  161/    95F6 : (MACRO)             	cmd 	'R','U',3,CMD_Run									; RUN
(1)  161/    95F6 : 52 55                       db              'R','U'                                                                                           ; first and second characters
(1)  161/    95F8 : 02                          db              (3)-1                                                                                      ; 3 -1 (first char already skipped)
(1)  161/    95F9 : A1 93                       dw              (CMD_RUN)-1                                                                                        ; execution point for prefetch.
(1)  162/    95FB : (MACRO)             	cmd 	'L','I',4,CMD_List 									; LIST
(1)  162/    95FB : 4C 49                       db              'L','I'                                                                                           ; first and second characters
(1)  162/    95FD : 03                          db              (4)-1                                                                                      ; 4 -1 (first char already skipped)
(1)  162/    95FE : 02 91                       dw              (CMD_LIST)-1                                                                                        ; execution point for prefetch.
(1)  163/    9600 : (MACRO)             	cmd 	'O','S',2,CMD_OS 									; OS
(1)  163/    9600 : 4F 53                       db              'O','S'                                                                                           ; first and second characters
(1)  163/    9602 : 01                          db              (2)-1                                                                                      ; 2 -1 (first char already skipped)
(1)  163/    9603 : F9 90                       dw              (CMD_OS)-1                                                                                        ; execution point for prefetch.
(1)  164/    9605 : 00                  	db 		0
(1)  165/    9606 :                     
(1)  166/    9606 :                     ; Done:	GOTO, RUN, CLEAR, NEW, END, OS, CALL, LET (and optional version),IF, LIST., PR
(1)  167/    9606 :                     ; Not Done: IN
      73/    9606 :                     	include source\manager.asm 									; manage program lines.
(1)    1/    9606 :                     ; ****************************************************************************************************************
(1)    2/    9606 :                     ; ****************************************************************************************************************
(1)    3/    9606 :                     ;
(1)    4/    9606 :                     ;										Insert / Delete Program Lines
(1)    5/    9606 :                     ;
(1)    6/    9606 :                     ; ****************************************************************************************************************
(1)    7/    9606 :                     ; ****************************************************************************************************************
(1)    8/    9606 :                     
(1)    9/    9606 :                     ; ****************************************************************************************************************
(1)   10/    9606 :                     ; ****************************************************************************************************************
(1)   11/    9606 :                     ;
(1)   12/    9606 :                     ;						Delete program line 'E'. If program line does not exist, has no effect.
(1)   13/    9606 :                     ;
(1)   14/    9606 :                     ;	Sets up P3 to call insert program line next.
(1)   15/    9606 :                     ; ****************************************************************************************************************
(1)   16/    9606 :                     ; ****************************************************************************************************************
(1)   17/    9606 :                     
(1)   18/    9606 :                     DeleteLine:
(1)   19/    9606 : (MACRO)             	pushp	p3 													; save P3
(1)   19/    9606 : 37                          xpah    P3
(1)   19/    9607 : CE FF                       st              @-1(p2)
(1)   19/    9609 : 33                          xpal    P3
(1)   19/    960A : CE FF                       st              @-1(p2)
(1)   20/    960C : 40                  	lde 														; push E on stack
(1)   21/    960D : CE FF               	st 		@-1(p2)
(1)   22/    960F :                     ;
(1)   23/    960F :                     ;	First find the line in question.
(1)   24/    960F :                     ;
 AS V1.42 Beta [Bld 102] - source file minol.asm(manager.asm) - page 30 - 1/18/2016 18:16:22


(1)   25/    960F : (MACRO)             	lpi 	p3,ProgramBase 										; first, look for the line.
(1)   25/    960F : C4 10                       ldi     (PROGRAMBASE) / 256
(1)   25/    9611 : 37                          xpah    P3
(1)   25/    9612 : C4 04                       ldi     (PROGRAMBASE) & 255
(1)   25/    9614 : 33                          xpal    P3
(1)   26/    9615 :                     DLN_Search:
(1)   27/    9615 : C3 00               	ld 		(p3)												; look at offset
(1)   28/    9617 : D4 80               	ani 	0x80
(1)   29/    9619 : 9C 15               	jnz 	DLN_Exit 											; if -ve then end of program so exit.
(1)   30/    961B :                     
(1)   31/    961B : C3 00               	ld 		(p3) 												; reload offset to next.
(1)   32/    961D : 01                  	xae 														; put offset in E
(1)   33/    961E : C3 01               	ld 		1(p3) 												; read line number
(1)   34/    9620 : E2 00               	xor 	(p2)												; is it the required line number
(1)   35/    9622 : 98 04               	jz 		DLN_Delete  										; if so, delete line.
(1)   36/    9624 : C7 80               	ld 		@-0x80(p3) 											; use E as offset to next.
(1)   37/    9626 : 90 ED               	jmp 	DLN_Search 											; and try next one.
(1)   38/    9628 :                     ;
(1)   39/    9628 :                     DLN_Delete:
(1)   40/    9628 : C3 80               	ld 		-0x80(p3) 											; read ahead
(1)   41/    962A : CF 01               	st 		@1(p3) 												; save here and bump
(1)   42/    962C : E4 FF               	xri 	0xFF 												; until 0xFF is copied, which is end of program.
(1)   43/    962E : 9C F8               	jnz 	DLN_Delete
(1)   44/    9630 :                     ;
(1)   45/    9630 :                     DLN_Exit:
(1)   46/    9630 : C6 01               	ld 		@1(p2)												; pop E
(1)   47/    9632 : 01                  	xae
(1)   48/    9633 : (MACRO)             	pullp	p3													; pop P3
(1)   48/    9633 : C6 01                       ld              @1(p2)
(1)   48/    9635 : 33                          xpal    P3
(1)   48/    9636 : C6 01                       ld              @1(p2)
(1)   48/    9638 : 37                          xpah    P3
(1)   49/    9639 : 3F                  	xppc 	p3 													; and return.
(1)   50/    963A :                     
(1)   51/    963A :                     ; ****************************************************************************************************************
(1)   52/    963A :                     ; ****************************************************************************************************************
(1)   53/    963A :                     ;
(1)   54/    963A :                     ;									Insert line at line E, text at P1
(1)   55/    963A :                     ;
(1)   56/    963A :                     ;	Jams if line already present.
(1)   57/    963A :                     ; ****************************************************************************************************************
(1)   58/    963A :                     ; ****************************************************************************************************************
(1)   59/    963A :                     
(1)   60/    963A :                     InsertLine:
(1)   61/    963A : (MACRO)             	pushp 	p3 													; save P3
(1)   61/    963A : 37                          xpah    P3
(1)   61/    963B : CE FF                       st              @-1(p2)
(1)   61/    963D : 33                          xpal    P3
(1)   61/    963E : CE FF                       st              @-1(p2)
(1)   62/    9640 : (MACRO)             	pushe 														; save E , line number.
(1)   62/    9640 : 40                          lde
(1)   62/    9641 : CE FF                       st              @-1(p2)
(1)   63/    9643 :                     
(1)   64/    9643 : 35                  	xpah 	p1													; save P1 on stack without changing it.
(1)   65/    9644 : CE FF               	st 		@-1(p2)
(1)   66/    9646 : 35                  	xpah 	p1
(1)   67/    9647 : 31                  	xpal 	p1
(1)   68/    9648 : CE FF               	st 		@-1(p2)
(1)   69/    964A : 31                  	xpal 	p1
(1)   70/    964B : C4 00               	ldi 	0 													; this is the length of the string
 AS V1.42 Beta [Bld 102] - source file minol.asm(manager.asm) - page 31 - 1/18/2016 18:16:22


(1)   71/    964D : CE FF               	st 		@-1(p2) 											; including the terminating zero.
(1)   72/    964F :                     
(1)   73/    964F :                     ILI_FindLength:
(1)   74/    964F : AA 00               	ild 	(p2)												; increment length
(1)   75/    9651 : C5 01               	ld 		@1(p1) 												; fetch and bump
(1)   76/    9653 : 9C FA               	jnz 	ILI_FindLength
(1)   77/    9655 :                     
(1)   78/    9655 : (MACRO)             	lpi 	p3,ProgramBase 
(1)   78/    9655 : C4 10                       ldi     (PROGRAMBASE) / 256
(1)   78/    9657 : 37                          xpah    P3
(1)   78/    9658 : C4 04                       ldi     (PROGRAMBASE) & 255
(1)   78/    965A : 33                          xpal    P3
(1)   79/    965B :                     ILI_FindPosition:
(1)   80/    965B : C3 00               	ld 		(p3) 												; read offset
(1)   81/    965D : D4 80               	ani 	0x80 												; if negative, insert here.
(1)   82/    965F : 9C 11               	jnz 	ILI_InsertHere
(1)   83/    9661 : C3 00               	ld 		(p3)												; put offset to next in E.
(1)   84/    9663 : 01                  	xae
(1)   85/    9664 : C2 03               	ld 		3(p2) 												; calculate line# - this#
(1)   86/    9666 : 03                  	scl
(1)   87/    9667 : FB 01               	cad 	1(p3)
(1)   88/    9669 :                     ILI_Failed: 													; error here. If line# found, we haven't deleted it !
(1)   89/    9669 : 98 FE               	jz 		ILI_Failed
(1)   90/    966B : 06                  	csa 														; if CY/L = 0 then insert here
(1)   91/    966C : 94 04               	jp 		ILI_InsertHere
(1)   92/    966E : C7 80               	ld 		@-0x80(p3)											; go to next line.
(1)   93/    9670 : 90 E9               	jmp 	ILI_FindPosition
(1)   94/    9672 :                     
(1)   95/    9672 :                     ILI_InsertHere:
(1)   96/    9672 : C4 00               	ldi 	0 													; these are used to count how many bytes from here to the end.
(1)   97/    9674 : CA FF               	st 		-1(p2)
(1)   98/    9676 : CA FE               	st 		-2(p2)
(1)   99/    9678 :                     ILI_CountBytes:
(1)  100/    9678 : AA FE               	ild 	-2(p2)
(1)  101/    967A : 9C 02               	jnz 	ILI_NoCarry
(1)  102/    967C : AA FF               	ild 	-1(p2)
(1)  103/    967E :                     ILI_NoCarry:
(1)  104/    967E : C7 01               	ld 		@1(p3)												; fetch and bump
(1)  105/    9680 : E4 FF               	xri 	0xFF 												; until $FF found.
(1)  106/    9682 : 9C F4               	jnz 	ILI_CountBytes
(1)  107/    9684 : C2 00               	ld 		0(p2) 												; get length of string into E
(1)  108/    9686 : 01                  	xae
(1)  109/    9687 :                     
(1)  110/    9687 :                     ILI_Move:
(1)  111/    9687 : C3 00               	ld 		(p3)												; move byte
(1)  112/    9689 : CB 80               	st 		-0x80(p3)
(1)  113/    968B : C7 FF               	ld 		@-1(p3) 											; point to previous byte
(1)  114/    968D :                     
(1)  115/    968D : C2 FE               	ld 		-2(p2) 												; decrement the counter
(1)  116/    968F : 9C 06               	jnz 	ILI_NoBorrow
(1)  117/    9691 : BA FF               	dld 	-1(p2) 
(1)  118/    9693 : D4 80               	ani 	0x80
(1)  119/    9695 : 9C 04               	jnz 	ILI_GotSpace 										; if counter out, then got the space.
(1)  120/    9697 :                     ILI_NoBorrow:
(1)  121/    9697 : BA FE               	dld 	-2(p2)
(1)  122/    9699 : 90 EC               	jmp 	ILI_Move
(1)  123/    969B :                     
(1)  124/    969B :                     ILI_GotSpace:
(1)  125/    969B : C7 01               	ld 		@1(p3) 												; this is where the new data goes
(1)  126/    969D : C2 01               	ld 		1(p2)												; restore the original P1.
 AS V1.42 Beta [Bld 102] - source file minol.asm(manager.asm) - page 32 - 1/18/2016 18:16:22


(1)  127/    969F : 31                  	xpal 	p1
(1)  128/    96A0 : C2 02               	ld 		2(p2)
(1)  129/    96A2 : 35                  	xpah 	p1
(1)  130/    96A3 :                     
(1)  131/    96A3 :                     ILI_Copy:														; copy the new line in.
(1)  132/    96A3 : C5 01               	ld 		@1(p1)
(1)  133/    96A5 : CF 01               	st 		@1(p3)
(1)  134/    96A7 : 9C FA               	jnz 	ILI_Copy
(1)  135/    96A9 :                     
(1)  136/    96A9 : C6 01               	ld 		@1(p2) 												; dump string length
(1)  137/    96AB : (MACRO)             	pullp 	p1													; restore registers
(1)  137/    96AB : C6 01                       ld              @1(p2)
(1)  137/    96AD : 31                          xpal    P1
(1)  137/    96AE : C6 01                       ld              @1(p2)
(1)  137/    96B0 : 35                          xpah    P1
(1)  138/    96B1 : (MACRO)             	pulle
(1)  138/    96B1 : C6 01                       ld              @1(p2)
(1)  138/    96B3 : 01                          xae
(1)  139/    96B4 : (MACRO)             	pullp 	p3
(1)  139/    96B4 : C6 01                       ld              @1(p2)
(1)  139/    96B6 : 33                          xpal    P3
(1)  139/    96B7 : C6 01                       ld              @1(p2)
(1)  139/    96B9 : 37                          xpah    P3
(1)  140/    96BA : 3F                  	xppc 	p3
(1)  141/    96BB :                     
      74/    96BB :                     	include source\console.asm 									; console type in etc.
(1)    1/    96BB :                     ; ****************************************************************************************************************
(1)    2/    96BB :                     ; ****************************************************************************************************************
(1)    3/    96BB :                     ;
(1)    4/    96BB :                     ;												Console Handler
(1)    5/    96BB :                     ;
(1)    6/    96BB :                     ; ****************************************************************************************************************
(1)    7/    96BB :                     ; ****************************************************************************************************************
(1)    8/    96BB :                     
(1)    9/    96BB :                     ; ****************************************************************************************************************
(1)   10/    96BB :                     ;
(1)   11/    96BB :                     ;							Come here when a program stops running, or at the start.
(1)   12/    96BB :                     ;
(1)   13/    96BB :                     ; ****************************************************************************************************************
(1)   14/    96BB :                     
(1)   15/    96BB :                     ConsoleStart:
(1)   16/    96BB : (MACRO)             	lpi 	p3,Print-1 
(1)   16/    96BB : C4 00                       ldi     (PRINT-1) / 256
(1)   16/    96BD : 37                          xpah    P3
(1)   16/    96BE : C4 02                       ldi     (PRINT-1) & 255
(1)   16/    96C0 : 33                          xpal    P3
(1)   17/    96C1 : 06                  	csa 														; see if CY/L is set
(1)   18/    96C2 : D4 80               	ani	 	0x80								
(1)   19/    96C4 : 98 24               	jz 		CONError 											; if so, there is an error.
(1)   20/    96C6 :                     
(1)   21/    96C6 :                     ; ****************************************************************************************************************
(1)   22/    96C6 :                     ;													Print OK
(1)   23/    96C6 :                     ; ****************************************************************************************************************
(1)   24/    96C6 :                     
(1)   25/    96C6 :                     CONOk:
(1)   26/    96C6 : (MACRO)             	lpi 	p1,CONMsgOk 										; print OK.
(1)   26/    96C6 : C4 96                       ldi     (CONMSGOK) / 256
(1)   26/    96C8 : 35                          xpah    P1
(1)   26/    96C9 : C4 D1                       ldi     (CONMSGOK) & 255
(1)   26/    96CB : 31                          xpal    P1
 AS V1.42 Beta [Bld 102] - source file minol.asm(console.asm) - page 33 - 1/18/2016 18:16:22


(1)   27/    96CC : C4 00               	ldi 	0
(1)   28/    96CE : 3F                  	xppc 	p3
(1)   29/    96CF : 90 53               	jmp 	CONEnter
(1)   30/    96D1 :                     
(1)   31/    96D1 :                     CONMsgOk:														; OK prompt.
(1)   32/    96D1 : 4F 4B 0D 00         	db 		"OK",13,0
(1)   33/    96D5 :                     CONMsgErr1:														; Error Message
(1)   34/    96D5 : 21 45 52 52 20 00   	db 		"!ERR ",0 
(1)   35/    96DB : 20 41 54 20 00      	db 		" AT ",0
(1)   36/    96E0 :                     CONMsgErr2:														; Error Message
(1)   37/    96E0 : 42 52 45 41 4B 00   	db 		"BREAK",0 
(1)   38/    96E6 : 41 54 20 00         	db 		"AT ",0
(1)   39/    96EA :                     
(1)   40/    96EA :                     
(1)   41/    96EA :                     ; ****************************************************************************************************************
(1)   42/    96EA :                     ;											   Print Error Message
(1)   43/    96EA :                     ; ****************************************************************************************************************
(1)   44/    96EA :                     
(1)   45/    96EA :                     CONError:
(1)   46/    96EA : (MACRO)             	lpi 	p1,CONMsgErr1
(1)   46/    96EA : C4 96                       ldi     (CONMSGERR1) / 256
(1)   46/    96EC : 35                          xpah    P1
(1)   46/    96ED : C4 D5                       ldi     (CONMSGERR1) & 255
(1)   46/    96EF : 31                          xpal    P1
(1)   47/    96F0 : 40                  	lde 														; check if faux error
(1)   48/    96F1 : E4 FF               	xri 	ERRC_End
(1)   49/    96F3 : 98 D1               	jz 		CONOk
(1)   50/    96F5 : 40                  	lde
(1)   51/    96F6 : E4 38               	xri 	ERRC_Break			 								; check if BREAK
(1)   52/    96F8 : 9C 09               	jnz 	CONError2
(1)   53/    96FA : (MACRO)             	lpi 	p1,CONMsgErr2
(1)   53/    96FA : C4 96                       ldi     (CONMSGERR2) / 256
(1)   53/    96FC : 35                          xpah    P1
(1)   53/    96FD : C4 E0                       ldi     (CONMSGERR2) & 255
(1)   53/    96FF : 31                          xpal    P1
(1)   54/    9700 : C4 20               	ldi 	' '													; makes it print space rather than code.
(1)   55/    9702 : 01                  	xae
(1)   56/    9703 :                     CONError2:
(1)   57/    9703 : C4 00               	ldi 	0
(1)   58/    9705 : 3F                  	xppc 	p3
(1)   59/    9706 : 40                  	lde 														; get error code
(1)   60/    9707 : 3F                  	xppc 	p3
(1)   61/    9708 : C4 00               	ldi 	0 													; print _AT_
(1)   62/    970A : 3F                  	xppc 	p3
(1)   63/    970B : (MACRO)             	lpi 	p3,CurrentLine 										; get current line number into E.
(1)   63/    970B : C4 0C                       ldi     (CURRENTLINE) / 256
(1)   63/    970D : 37                          xpah    P3
(1)   63/    970E : C4 8D                       ldi     (CURRENTLINE) & 255
(1)   63/    9710 : 33                          xpal    P3
(1)   64/    9711 : C3 00               	ld 		(p3)
(1)   65/    9713 : 01                  	xae
(1)   66/    9714 : (MACRO)             	lpi 	p3,PrintInteger-1 									; print it.
(1)   66/    9714 : C4 90                       ldi     (PRINTINTEGER-1) / 256
(1)   66/    9716 : 37                          xpah    P3
(1)   66/    9717 : C4 6B                       ldi     (PRINTINTEGER-1) & 255
(1)   66/    9719 : 33                          xpal    P3
(1)   67/    971A : 3F                  	xppc 	p3
(1)   68/    971B : (MACRO)             	lpi 	p3,Print-1
(1)   68/    971B : C4 00                       ldi     (PRINT-1) / 256
(1)   68/    971D : 37                          xpah    P3
 AS V1.42 Beta [Bld 102] - source file minol.asm(console.asm) - page 34 - 1/18/2016 18:16:22


(1)   68/    971E : C4 02                       ldi     (PRINT-1) & 255
(1)   68/    9720 : 33                          xpal    P3
(1)   69/    9721 : C4 0D               	ldi 	13 													; print new line
(1)   70/    9723 : 3F                  	xppc 	p3
(1)   71/    9724 :                     
(1)   72/    9724 :                     ; ****************************************************************************************************************
(1)   73/    9724 :                     ;												Get next command.
(1)   74/    9724 :                     ; ****************************************************************************************************************
(1)   75/    9724 :                     
(1)   76/    9724 :                     CONEnter:
(1)   77/    9724 : (MACRO)             	lpi 	p3,GetString-1 										; get input from keyboard.
(1)   77/    9724 : C4 00                       ldi     (GETSTRING-1) / 256
(1)   77/    9726 : 37                          xpah    P3
(1)   77/    9727 : C4 06                       ldi     (GETSTRING-1) & 255
(1)   77/    9729 : 33                          xpal    P3
(1)   78/    972A : (MACRO)             	lpi 	p1,KeyboardBuffer
(1)   78/    972A : C4 0C                       ldi     (KEYBOARDBUFFER) / 256
(1)   78/    972C : 35                          xpah    P1
(1)   78/    972D : C4 B0                       ldi     (KEYBOARDBUFFER) & 255
(1)   78/    972F : 31                          xpal    P1
(1)   79/    9730 : C4 00               	ldi 	0 													; clear current line # using value.
(1)   80/    9732 : C9 DD               	st 		CurrentLine-KeyboardBuffer(p1)
(1)   81/    9734 : C4 48               	ldi 	KeyboardBufferSize									; input length
(1)   82/    9736 : 3F                  	xppc 	p3
(1)   83/    9737 :                     
(1)   84/    9737 : (MACRO)             	lpi 	p3,GetConstant-1 									; extract a constant if there is one.
(1)   84/    9737 : C4 90                       ldi     (GETCONSTANT-1) / 256
(1)   84/    9739 : 37                          xpah    P3
(1)   84/    973A : C4 C7                       ldi     (GETCONSTANT-1) & 255
(1)   84/    973C : 33                          xpal    P3
(1)   85/    973D : 3F                  	xppc 	p3
(1)   86/    973E : D4 80               	ani 	0x80
(1)   87/    9740 : 9C 19               	jnz 	CONHasLineNumber 									; if okay, has line number.
(1)   88/    9742 :                     
(1)   89/    9742 : C1 00               	ld 		(p1)												; if no text, enter again.
(1)   90/    9744 : 98 DE               	jz 		CONEnter
(1)   91/    9746 :                     
(1)   92/    9746 :                     ; ****************************************************************************************************************
(1)   93/    9746 :                     ;									Execute a command from the keyboard.
(1)   94/    9746 :                     ; ****************************************************************************************************************
(1)   95/    9746 :                     
(1)   96/    9746 :                     CONEndOfLine:
(1)   97/    9746 : C5 01               	ld 		@1(p1) 												; find end of line
(1)   98/    9748 : 9C FC               	jnz 	CONEndOfLine
(1)   99/    974A : C4 FF               	ldi 	0xFF												; put end of code marker at end of string.
(1)  100/    974C : C9 00               	st 		(p1)
(1)  101/    974E : (MACRO)             	lpi 	p1,KeyboardBuffer 	
(1)  101/    974E : C4 0C                       ldi     (KEYBOARDBUFFER) / 256
(1)  101/    9750 : 35                          xpah    P1
(1)  101/    9751 : C4 B0                       ldi     (KEYBOARDBUFFER) & 255
(1)  101/    9753 : 31                          xpal    P1
(1)  102/    9754 : (MACRO)             	lpi 	p3,ExecuteFromAddressDirect-1
(1)  102/    9754 : C4 93                       ldi     (EXECUTEFROMADDRESSDIRECT-1) / 256
(1)  102/    9756 : 37                          xpah    P3
(1)  102/    9757 : C4 D7                       ldi     (EXECUTEFROMADDRESSDIRECT-1) & 255
(1)  102/    9759 : 33                          xpal    P3
(1)  103/    975A : 3F                  	xppc 	p3
(1)  104/    975B :                     
(1)  105/    975B :                     ; ****************************************************************************************************************
(1)  106/    975B :                     ;						Command has a Line Number - text is at P1, line number in E.
 AS V1.42 Beta [Bld 102] - source file minol.asm(console.asm) - page 35 - 1/18/2016 18:16:22


(1)  107/    975B :                     ; ****************************************************************************************************************
(1)  108/    975B :                     
(1)  109/    975B :                     CONHasLineNumber:
(1)  110/    975B : (MACRO)             	lpi 	p3,DeleteLine-1 									; delete the line whose number is in E
(1)  110/    975B : C4 96                       ldi     (DELETELINE-1) / 256
(1)  110/    975D : 37                          xpah    P3
(1)  110/    975E : C4 05                       ldi     (DELETELINE-1) & 255
(1)  110/    9760 : 33                          xpal    P3
(1)  111/    9761 : 3F                  	xppc 	p3
(1)  112/    9762 :                     
(1)  113/    9762 : C1 00               	ld 		(p1) 												; any text in this line ?
(1)  114/    9764 : 98 BE               	jz 		CONEnter											; if not, then just do the delete (possible)
(1)  115/    9766 :                     
(1)  116/    9766 : C4 00               	ldi 	0													; temporarily set the line number to zero.
(1)  117/    9768 : C9 FF               	st 		-1(p1)
(1)  118/    976A : C4 02               	ldi 	2
(1)  119/    976C : CA FF               	st 		-1(p2) 												; and reset the counter to 2 to get size right.
(1)  120/    976E :                     CONGetLength:
(1)  121/    976E : AA FF               	ild 	-1(p2) 												; bump count
(1)  122/    9770 : C5 01               	ld 		@1(p1) 												; keep going forward till 0 read.
(1)  123/    9772 : 9C FA               	jnz 	CONGetLength
(1)  124/    9774 : C5 FF               	ld 		@-1(p1) 											; undo the last bump over zero
(1)  125/    9776 :                     
(1)  126/    9776 :                     CONBackToStart:
(1)  127/    9776 : C5 FF               	ld 		@-1(p1) 											; keep going back until zero.
(1)  128/    9778 : 9C FC               	jnz 	CONBackToStart										; this is the line number we set to zero
(1)  129/    977A :                     
(1)  130/    977A : 40                  	lde 														; copy line number
(1)  131/    977B : C9 00               	st 		(p1)
(1)  132/    977D : C2 FF               	ld 		-1(p2) 												; get measured length
(1)  133/    977F : CD FF               	st 		@-1(p1) 											; and store in the length slot.
(1)  134/    9781 :                     
(1)  135/    9781 : 3F                  	xppc 	p3 													; put line in using fall through insert routine.
(1)  136/    9782 : 90 A0               	jmp 	CONEnter 											; and get another line.
(1)  137/    9784 :                     
      75/    9784 :                     
 AS V1.42 Beta [Bld 102] - source file minol.asm - page 36 - 1/18/2016 18:16:22


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :  i386-unknown-win32 - | *BIGENDIAN :                      0 - |
 BOOTMESSAGE :                 904F C |  BOOTMONITOR :                  168 - |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
 CCA_OVER :                    92DD C |  CCL_LOOP :                    9213 C |
 CCL_OVER :                    921C C |  CHECKLASTCOMMANDTHENEXECUTE : 93B7 C |
 CIF_CONTINUE :                9349 C |  CIF_EQUALITY :                9365 C |
 CIF_EQUALITY2 :               936C C |  CIF_OVER :                    937F C |
 CIF_SYNTAX :                  9343 C |  CIF_TESTIFZERO :              9372 C |
 CIN_FINDEND :                 91F9 C |  CIN_INPUTVARIABLEORMEMORY :   91AD C |
 CIN_MEMORY :                  91A8 C |  CIN_OVER :                    9207 C |
 CIN_OVER2 :                   9199 C |  CIN_STOREVALUE :              91D2 C |
 CIN_STRING :                  91E3 C |  CIN_SYNTAX :                  9195 C |
 CIN_VARIABLE :                919B C |  CLE_EVALUATEANDWRITE :        9310 C |
 CLE_ISHL :                    9305 C |  CLE_OVER :                    9330 C |
 CLE_SINGLEVARIABLE :          92F6 C |  CLE_SYNTAX :                  92F0 C |
 CLI_END :                     9141 C |  CLI_ENDLINE :                 912D C |
 CLI_LINE :                    9126 C |  CLI_LOOP :                    910D C |
 CLI_OVER :                    9147 C |  CMD_CALL :                    92B6 C |
 CMD_CLEAR :                   9209 C |  CMD_END :                     9163 C |
 CMD_GOTO :                    9381 C |  CMD_IF :                      9332 C |
 CMD_IN :                      9169 C |  CMD_IN2 :                     91E1 C |
 CMD_LET :                     92DF C |  CMD_LIST :                    9103 C |
 CMD_NEW :                     9149 C |  CMD_OS :                      90FA C |
 CMD_PRINT :                   921E C |  CMD_PRINT2 :                  9269 C |
 CMD_RUN :                     93A2 C |  CNE_OVER :                    9167 C |
 COMMANDLIST :                 95C9 C |  CONBACKTOSTART :              9776 C |
 CONENDOFLINE :                9746 C |  CONENTER :                    9724 C |
 CONERROR :                    96EA C |  CONERROR2 :                   9703 C |
 CONGETLENGTH :                976E C |  CONHASLINENUMBER :            975B C |
 CONMSGERR1 :                  96D5 C |  CONMSGERR2 :                  96E0 C |
 CONMSGOK :                    96D1 C |  CONOK :                       96C6 C |
 CONSOLESTART :                96BB C | *CONSTPI :        3.141592653589793 - |
 COS_OVER :                    9101 C |  CPR_BREAK :                   926B C |
 CPR_ENDOK :                   92B3 C |  CPR_ENDRETURN :               92B0 C |
 CPR_OVER :                    92B4 C |  CPR_OVER2 :                   926F C |
 CPR_QUOTEDSTRING :            9271 C |  CPR_STRINGATADDRESS :         927E C |
 CPR_STRINGEXIT :              929D C |  CPR_STRINGLOOP :              9297 C |
 CPR_STRINGPRINT :             92A5 C |  CPR_SYNTAX :                  92AA C |
 CRG_EXECUTEFROMP1 :           93A8 C |  CRG_FIND :                    938D C |
 CRG_NOTEND :                  9397 C |  CRG_OVER :                    93AA C |
 CURRENTLINE :                  C8D - | *DATE :                   1/18/2016 - |
 DELETELINE :                  9606 C |  DLN_DELETE :                  9628 C |
 DLN_EXIT :                    9630 C |  DLN_SEARCH :                  9615 C |
 EAFD_LETCODE :                9421 C |  EAFD_SEARCH :                 93F1 C |
 EAFD_SKIP :                   9402 C |  EAFD_SKIPSPACES :             940E C |
 EAP_ERROR :                   95BB C |  EAP_EXIT :                    95BF C |
 EEX_CHECKNEXTOPERATION :      9519 C |  EEX_CONSTANT :                94B0 C |
 EEX_CONSTANTLOOP :            94B1 C |  EEX_DIVIDE :                  953C C |
 EEX_DIVIDE_LOOP :             954D C |
 EEX_DIVIDE_NUMERATOR_POSITIVE :                                       955E C |
 EEX_DIVIDE_TEMP_POSITIVE :    9571 C |  EEX_DIVIDE_ZERO :             94E9 C |
 EEX_ENDEXPRESSION :           94ED C |  EEX_ERROR :                   9495 C |
 EEX_EXIT :                    9497 C |  EEX_FOUNDOPERATOR :           9531 C |
 EEX_HAVETERM :                94D1 C |  EEX_MEMORYACCESS :            94A3 C |
 EEX_MULTIPLYLOOP :            94FF C |  EEX_MULTIPLY_B0ISZERO :       950D C |
 EEX_NEXTCHAR :                9440 C |  EEX_NOTADD :                  94DD C |
 EEX_NOTAP :                   946B C |  EEX_NOTQUOTE :                9480 C |
 AS V1.42 Beta [Bld 102] - source file minol.asm - page 37 - 1/18/2016 18:16:22


 EEX_NOTRANDOM :               946D C |  EEX_NOTSUBTRACT :             94F3 C |
 EEX_PENDINGOP :                  1 - | *EEX_RANDOM :                  9452 C |
 EEX_SAVEANDEXIT :             94E5 C |  EEX_TERM :                    943A C |
 EEX_TERMERROR :               9493 C |  EEX_VALUE :                      0 - |
 EEX_VARIABLE :                94CD C | *ENDOFCOMMANDEXECUTION :       93AA C |
 ERRC_BREAK :                    38 - |  ERRC_DIVZERO :                  37 - |
 ERRC_END :                      FF - |  ERRC_LABEL :                    31 - |
*ERRC_MEMORY :                   36 - |  ERRC_SYNTAX :                   35 - |
 ERRC_TERM :                     34 - | *ERRC_UNKNOWN :                  32 - |
 EVALUATEADDRESSPAIR :         957F C |  EVALUATEEXPRESSION :          942C C |
 EXECUTEFROMADDRESSDIRECT :    93D8 C |  EXECUTEFROMCOMMANDSTART :     93CC C |
 EXECUTENEXTINSTRUCTION :      93AD C | *FALSE :                          0 - |
 FINDTOS :                     9007 C | *FULLPMMU :                       1 - |
 GCO_EXIT :                    90F1 C |  GCO_LOOP :                    90CD C |
 GETCHAR :                        5 - |  GETCONSTANT :                 90C8 C |
 GETSTRING :                      7 - |  GOTOCOMMANDLINE :             93BF C |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
 ILI_COPY :                    96A3 C |  ILI_COUNTBYTES :              9678 C |
 ILI_FAILED :                  9669 C |  ILI_FINDLENGTH :              964F C |
 ILI_FINDPOSITION :            965B C |  ILI_GOTSPACE :                969B C |
 ILI_INSERTHERE :              9672 C |  ILI_MOVE :                    9687 C |
 ILI_NOBORROW :                9697 C |  ILI_NOCARRY :                 967E C |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSERTLINE :                  963A C |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
 KEYBOARDBUFFER :               CB0 - |  KEYBOARDBUFFERSIZE :            48 - |
*LISTON :                         1 - | *MACEXP :                         1 - |
 MARKER1 :                       FD - |  MARKER2 :                       B5 - |
 MARKER3 :                       AE - |  MARKER4 :                       76 - |
*MOMCPU :                         C - | *MOMCPUNAME :                 SC/MP - |
*NESTMAX :                      100 - | *OSMATHLIBRARY :                  3 - |
*PACKING :                        0 - | *PADDING :                        1 - |
 PRINT :                          3 - |  PRINTINTEGER :                906C C |
 PROGRAMBASE :                 1004 - |  RANDOMSEED :                   C8E - |
*RELAXED :                        0 - |  RUNNEW :                      9048 C |
*SCREENCURSOR :                 C80 - |  SCREENMIRROR :                 C00 - |
 STACKFOUND :                  9013 C | *STARTUP :                     9013 C |
 SYNTAXERROR :                 93C6 C |  SYSTEMMEMORY :                 C90 - |
*TIME :                    18:16:22 - | *TRUE :                           1 - |
 VARIABLES :                    C90 - | *VERSION :                     142F - |
 __PIDIVIDEEND :               909D C |  __PIDIVIDELOOP :              9080 C |
 __PIDIVIDEOUTER :             907A C |  __PIEXIT :                    90BF C |
 __PIFAIL :                    90C6 C |  __PIPRINT :                   90B2 C |

    200 symbols
     36 unused symbols

 AS V1.42 Beta [Bld 102] - source file minol.asm - page 38 - 1/18/2016 18:16:22


  defined macros:
  ---------------

CMD                                   | CODE                                 
LPI                                   | PULLA                                
PULLE                                 | PULLP                                
PUSHA                                 | PUSHE                                
PUSHP                                 | SETV                                 

     10 macros

 AS V1.42 Beta [Bld 102] - source file minol.asm - page 39 - 1/18/2016 18:16:22


  codepages:
  ----------

STANDARD (0 changed characters)


0.03 seconds assembly time

   1756 lines source file
   2072 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
